as_tibble %>%
inner_join(assignment, by = 'stationid')
# Create the dataset needed to compute all the SQO benthic indices
benthic_data <- grab %>%
dplyr::filter(benthicinfauna == 'Yes') %>%
dplyr::inner_join(station_occupation, by = c('stationid','sampledate' = 'occupationdate')) %>%
dplyr::inner_join(infauna, by = c('stationid','sampledate')) %>%
dplyr::select('stationid','replicate','sampledate','latitude','longitude','taxon','abundance','salinity', 'stratum', 'exclude') %>%
dplyr::mutate_if(is.numeric, list(~na_if(., -88))) %>%
dplyr::rename(species = taxon) %>%
dplyr::rename(StationID = stationid, Replicate = replicate, SampleDate = sampledate, Latitude = latitude, Longitude = longitude, Species = species, Abundance = abundance, Salinity = salinity, Stratum = stratum, Exclude = exclude)
save(benthic_data, file = "data/benthic_data.Rdata")
write.csv(benthic_data, file = "data/benthic_data.csv", row.names = FALSE)
save(grab, file = 'data/grab_data.Rdata')
save(assignment, file = 'data/assignment_data.Rdata')
save(station_occupation, file = 'data/stationoccupation_data.Rdata')
View(infauna)
View(assignment)
# con is short for connection
# Create connection to the database
con <- DBI::dbConnect(
PostgreSQL(),
host = "192.168.1.16",
dbname = 'bight2018',
user = 'b18read',
password = '1969$Harbor' # if we post to github, we might want to do rstudioapi::askForPassword()
)
chem <- tbl(con, "tbl_chemistry_initial")
chem <- tbl(con, "tbl_chemistry")
require(DBI) # needed to connect to database
require(dbplyr) # needed to connect to database
require(RPostgreSQL) # needed to connect to our database
require(rstudioapi) # just so we can type the password as we run the script, so it is not written in the clear
require(tidyverse)
# con is short for connection
# Create connection to the database
con <- DBI::dbConnect(
PostgreSQL(),
host = "192.168.1.16",
dbname = 'bight2018',
user = 'b18read',
password = '1969$Harbor' # if we post to github, we might want to do rstudioapi::askForPassword()
)
# Bring in our tables from the database
infauna <- tbl(con, "tbl_infaunalabundance_initial") %>% as_tibble
View(infauna)
grab <- tbl(con, "tbl_grabevent") %>%
as_tibble %>%
dplyr::filter(grabeventnumber == 1)
View(grab)
# create a vector with all the RHMP stations of interest
# Note: We pasted the stations into a text file and created a csv.
#       This csv file is what is read in.
rhmp = read.csv("RHMP_data.csv", fileEncoding="UTF-8-BOM", header = FALSE)
# stations are read in as factors. We coerce them into characters.
rhmp = as.character(rhmp$V1)
DB <- grab %>% dplyr::filter(StationID %in% rhmp)
DB <- grab %>% dplyr::mutate(StationID = stationid) %>% dplyr::filter(StationID %in% rhmp)
View(DB)
length(rhmp)
length(DB) == length(rhmp)\
length(DB) == length(rhmp)
nrow(DB) == length(rhmp)
assignment <- tbl(con, "field_assignment_table") %>%
as_tibble %>%
dplyr::filter(stratum == "Bays" | stratum == "Ports" | stratum == "Estuaries" | stratum == "Brackish Estuaries")
View(assignment)
DB <- assignment %>% dplyr::mutate(StationID = stationid) %>% dplyr::filter(StationID %in% rhmp)
View(DB)
DB <- grab %>% dplyr::mutate(StationID = stationid) %>% dplyr::filter(StationID %in% rhmp)
DB_assignment <- assignment %>% dplyr::mutate(StationID = stationid) %>% dplyr::filter(StationID %in% rhmp)
View(DB_assignment)
View(assignment)
View(assignment)
rhmp
assignment <- tbl(con, "field_assignment_table") %>%
as_tibble %>%
dplyr::filter(stratum == "Bays" | stratum == "Ports" | stratum == "Estuaries" | stratum == "Brackish Estuaries")
assignment <- tbl(con, "field_assignment_table") %>%
as_tibble
rhmp
assignment <- tbl(con, "field_assignment_table") %>%
as_tibble %>%
dplyr::filter(stratum == "Bays" | stratum == "Ports" | stratum == "Estuaries" | stratum == "Brackish Estuaries" | stratum = "Marinas")
assignment <- tbl(con, "field_assignment_table") %>%
as_tibble %>%
dplyr::filter(stratum == "Bays" | stratum == "Ports" | stratum == "Estuaries" | stratum == "Brackish Estuaries" | stratum == "Marinas")
View(assignment)
DB_assignment = assignment %>%
dplyr::filter(StationID %in% rhmp)
DB_assignment = assignment %>% dplyr::rename(stationid = StationID) %>%
dplyr::filter(StationID %in% rhmp)
DB_assignment = assignment %>% dplyr::rename(StationID = stationid) %>%
dplyr::filter(StationID %in% rhmp)
DB_grab = grab %>% dplyr::rename(StationID = stationid) %>%
dplyr::filter(StationID %in% rhmp)
# filter the data base qeuery by the RHMP stations of interest
DB = benthic_data %>%
dplyr::filter(StationID %in% rhmp)
station_occupation <- tbl(con, "tbl_stationoccupation") %>%
as_tibble %>%
inner_join(assignment, by = 'stationid')
View(station_occupation)
DB_station_occupation = station_occupation %>% dplyr::rename(StationID = stationid) %>%
dplyr::filter(StationID %in% rhmp)
View(DB_station_occupation)
View(station_occupation)
# Create the dataset needed to compute all the SQO benthic indices
benthic_data <- grab %>%
dplyr::filter(benthicinfauna == 'Yes') %>%
dplyr::inner_join(station_occupation, by = c('stationid','sampledate' = 'occupationdate')) %>%
dplyr::inner_join(infauna, by = c('stationid','sampledate')) %>%
dplyr::select('stationid','replicate','sampledate','latitude','longitude','taxon','abundance','salinity', 'stratum', 'exclude') %>%
dplyr::mutate_if(is.numeric, list(~na_if(., -88))) %>%
dplyr::rename(species = taxon) %>%
dplyr::rename(StationID = stationid, Replicate = replicate, SampleDate = sampledate, Latitude = latitude, Longitude = longitude, Species = species, Abundance = abundance, Salinity = salinity, Stratum = stratum, Exclude = exclude)
# filter the data base qeuery by the RHMP stations of interest
DB = benthic_data %>%
dplyr::filter(StationID %in% rhmp)
View(DB)
unique(DB$StationID)
length(unique(DB$StationID))
View(infauna)
benthic_data <- grab %>%
dplyr::filter(benthicinfauna == 'Yes')
View(benthic_data)
length(unique(benthic_data$stationid))
DB_infauna = infauna %>% dplyr::rename(StationID = stationid) %>%
dplyr::filter(StationID %in% rhmp)
View(DB_infauna)
length(unique(DB_infauna$StationID))
DB_rhmp <- DB_grab %>%
dplyr::filter(benthicinfauna == 'Yes') #%>%
View(DB_rhmp)
View(DB_grab)
DB_rhmp <- DB_grab %>%
#dplyr::filter(benthicinfauna == 'Yes') %>% # if we filter with this, we lose some sites
dplyr::inner_join(station_occupation, by = c('stationid','sampledate' = 'occupationdate')) %>%
dplyr::inner_join(infauna, by = c('stationid','sampledate')) %>%
dplyr::select('stationid','replicate','sampledate','latitude','longitude','taxon','abundance','salinity', 'stratum', 'exclude') %>%
dplyr::mutate_if(is.numeric, list(~na_if(., -88))) %>%
dplyr::rename(species = taxon) %>%
dplyr::rename(StationID = stationid, Replicate = replicate, SampleDate = sampledate, Latitude = latitude, Longitude = longitude, Species = species, Abundance = abundance, Salinity = salinity, Stratum = stratum, Exclude = exclude)
DB_rhmp <- DB_grab %>%
dplyr::inner_join(station_occupation, by = c('stationid','sampledate' = 'occupationdate')) #%>%
DB_rhmp <- DB_grab %>%
dplyr::inner_join(DB_station_occupation, by = c('StationID','sampledate' = 'occupationdate')) #%>%
View(DB_rhmp)
DB_rhmp <- DB_grab %>%
dplyr::inner_join(DB_station_occupation, by = c('StationID','sampledate' = 'occupationdate')) %>%
dplyr::inner_join(infauna, by = c('StationID','sampledate')) #%>%
DB_rhmp <- DB_grab %>%
dplyr::inner_join(DB_station_occupation, by = c('StationID','sampledate' = 'occupationdate')) %>%
dplyr::inner_join(DB_infauna, by = c('StationID','sampledate')) #%>%
DB_rhmp <- DB_grab %>%
dplyr::inner_join(DB_station_occupation, by = c('StationID','sampledate' = 'occupationdate')) %>%
dplyr::inner_join(DB_infauna, by = c('StationID','sampledate')) %>%
dplyr::select('StationID','replicate','sampledate','latitude','longitude','taxon','abundance','salinity', 'stratum', 'exclude') #%>%
DB_rhmp <- DB_grab %>%
dplyr::inner_join(DB_station_occupation, by = c('StationID','sampledate' = 'occupationdate')) %>%
dplyr::inner_join(DB_infauna, by = c('StationID','sampledate')) %>%
dplyr::select('StationID','replicate','sampledate','latitude','longitude','taxon','abundance','salinity', 'stratum', 'exclude') %>%
dplyr::mutate_if(is.numeric, list(~na_if(., -88))) %>%
dplyr::rename(species = taxon) %>%
dplyr::rename(Replicate = replicate, SampleDate = sampledate, Latitude = latitude, Longitude = longitude, Species = species, Abundance = abundance, Salinity = salinity, Stratum = stratum, Exclude = exclude)
View(DB_rhmp)
length(unique(DB_rhmp$StationID))
DB_rhmp <- DB_grab %>%
dplyr::inner_join(DB_station_occupation, by = c('StationID','sampledate' = 'occupationdate')) %>%
dplyr::inner_join(DB_infauna, by = c('StationID','sampledate')) %>%
dplyr::select('StationID','replicate','sampledate','latitude','longitude','taxon','abundance','salinity', 'stratum', 'exclude') #%>%
View(DB_rhmp)
unique(DB_rhmp$salinity)
View(DB_infauna)
unique(DB_station_occupation$salinity)
# Bring in our tables from the database
infauna <- tbl(con, "tbl_infaunalabundance_initial") %>% as_tibble
save(infauna, file = 'data/infauna_data.Rdata')
grab <- tbl(con, "tbl_grabevent") %>%
as_tibble %>%
dplyr::filter(grabeventnumber == 1)
save(grab, file = 'data/grab_data.Rdata')
assignment <- tbl(con, "field_assignment_table") %>%
as_tibble %>%
dplyr::filter(stratum == "Bays" | stratum == "Ports" | stratum == "Estuaries" | stratum == "Brackish Estuaries" | stratum == "Marinas")
save(assignment, file = 'data/assignment_data.Rdata')
station_occupation <- tbl(con, "tbl_stationoccupation") %>%
as_tibble %>%
inner_join(assignment, by = 'stationid')
save(station_occupation, file = 'data/station_occupation_data.Rdata')
DB_infauna = infauna %>% dplyr::rename(StationID = stationid) %>%
dplyr::filter(StationID %in% rhmp)
DB_assignment = assignment %>% dplyr::rename(StationID = stationid) %>%
dplyr::filter(StationID %in% rhmp)
DB_grab = grab %>% dplyr::rename(StationID = stationid) %>%
dplyr::filter(StationID %in% rhmp)
DB_station_occupation = station_occupation %>% dplyr::rename(StationID = stationid) %>%
dplyr::filter(StationID %in% rhmp)
DB_rhmp <- DB_grab %>%
dplyr::inner_join(DB_station_occupation, by = c('StationID','sampledate' = 'occupationdate')) %>%
dplyr::inner_join(DB_infauna, by = c('StationID','sampledate')) %>%
dplyr::select('StationID','replicate','sampledate','latitude','longitude','taxon','abundance','salinity', 'stratum', 'exclude') #%>%
View(DB_rhmp)
# Bring in our tables from the database
infauna <- tbl(con, "tbl_infaunalabundance_initial") %>% as_tibble
View(infauna)
grab <- tbl(con, "tbl_grabevent") %>%
as_tibble %>%
dplyr::filter(grabeventnumber == 1)
View(grab)
assignment <- tbl(con, "field_assignment_table") %>%
as_tibble %>%
dplyr::filter(stratum == "Bays" | stratum == "Ports" | stratum == "Estuaries" | stratum == "Brackish Estuaries" | stratum == "Marinas")
View(assignment)
station_occupation <- tbl(con, "tbl_stationoccupation") %>%
as_tibble %>%
inner_join(assignment, by = 'stationid')
View(station_occupation)
rhmp
test = c(station_occupation$stationid, station_occupation$salinity)
test
test = data.frame(c(station_occupation$stationid, station_occupation$salinity))
test
View(test)
test = data.frame(station_occupation$stationid, station_occupation$salinity)
rhmp
View(station_occupation)
sum(which(station_occupation$salinity != -88))
length(station_occupation)
sum(which(station_occupation$salinity != -88.00))
count(which(station_occupation$salinity != -88.00))
nrow(which(station_occupation$salinity != -88.00))
nrow(filter(station_occupation$salinity != -88.00))
nrow(dplyr::filter(station_occupation$salinity != -88.00))
View(DB_rhmp)
length(unique(DB_rhmp$StationID))
save(DB_rhmp, "data/rhmp_data.csv")
save(DB_rhmp, "data/rhmp_data.RData")
DB_rhmp <- DB_grab %>%
dplyr::inner_join(DB_station_occupation, by = c('StationID','sampledate' = 'occupationdate')) %>%
dplyr::inner_join(DB_infauna, by = c('StationID','sampledate')) %>%
dplyr::select('StationID','replicate','sampledate','latitude','longitude','taxon','abundance','salinity', 'stratum', 'exclude') %>%
dplyr::mutate_if(is.numeric, list(~na_if(., -88))) %>%
dplyr::rename(species = taxon) %>%
dplyr::rename(Replicate = replicate, SampleDate = sampledate, Latitude = latitude, Longitude = longitude, Species = species, Abundance = abundance, Salinity = salinity, Stratum = stratum, Exclude = exclude)
length(unique(DB_rhmp$StationID))
save(DB_rhmp, file = "data/rhmp_data.RData")
getwd()
source('P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/R/SQOUnified.R', echo=TRUE)
source('P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/R/BRI.R', echo=TRUE)
source('P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/R/RBI.R', echo=TRUE)
source('P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/R/IBI.R', echo=TRUE)
source('P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/R/MAMBI.R', echo=TRUE)
source('P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/R/EQR.R', echo=TRUE)
SQO = "all"
EG_File_Name="data/Ref - EG Values 2018.csv";EG_Scheme="Hybrid"
# Compute ALL SQO scores
if (SQO == "all"){
mambi.score <- MAMBI(DB, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid") %>%
dplyr::rename(B13_Stratum = Stratum) %>%
dplyr::mutate(Score = MAMBI_Score, Category = New_MAMBI_Condition) %>%
dplyr::mutate(Category_Score = case_when(Category == "Reference" ~ 1, Category == "Low Disturbance" ~ 2, Category == "Moderate Disturbance" ~ 3, Category == "High Disturbance" ~ 4))
rbi.scores <- RBI(DB)
ibi.scores <- IBI(DB)
bri.scores <- BRI(DB)
# We need to incorporate RIVPACS. Once we have this we will take the median of RIVPACS, IBI, BRI, RBI and report back one overall score (MBI?)
# Once this is done, we will add this to the final output.
# For RIVPACS, we're simply going to write a wrapper function and add this to SQOUnified.
# If you run into problems, call D. Gillet to get more clarifaction.
final.scores <- mambi.score %>%
dplyr::full_join(bri.scores) %>%
dplyr::full_join(rbi.scores) %>%
dplyr::full_join(ibi.scores) %>% # will add other scores to this data frame as they are computed
dplyr::select("StationID", "Replicate", "SampleDate", "B13_Stratum", "Index", "Score",
"Category", "Category_Score", "Use_MAMBI") %>%
dplyr::arrange(StationID, SampleDate, Replicate)
} else {
mambi.score <- MAMBI(DB, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid")
final.scores <- mambi.score %>%
dplyr::left_join(rbi.scores, by = c("StationID", "Replicate")) %>%
dplyr::left_join(ibi.scores, by = c("StationID", "Replicate")) %>%
dplyr::left_join(bri.scores, by = c("StationID", "Replicate")) %>%
dplyr::group_by(StationID, SampleDate, Replicate)
# will add other scores to this data frame as they are computed
}
View(benthic_data)
# Create the dataset needed to compute all the SQO benthic indices
benthic_data <- grab %>%
dplyr::inner_join(station_occupation, by = c('stationid','sampledate' = 'occupationdate')) %>%
dplyr::inner_join(infauna, by = c('stationid','sampledate')) %>%
dplyr::select('stationid','replicate','sampledate','latitude','longitude','taxon','abundance','salinity', 'stratum', 'exclude') %>%
dplyr::mutate_if(is.numeric, list(~na_if(., -88))) %>%
dplyr::rename(species = taxon) %>%
dplyr::rename(StationID = stationid, Replicate = replicate, SampleDate = sampledate, Latitude = latitude, Longitude = longitude, Species = species, Abundance = abundance, Salinity = salinity, Stratum = stratum, Exclude = exclude)
save(benthic_data, file = "data/benthic_data_BenthicNoFilter.Rdata")
write.csv(benthic_data, file = "data/benthic_data_BenthicNoFilter.csv", row.names = FALSE)
load("P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/data/benthic_data_BenthicNoFilter.Rdata")
DB = benthic_data
# Compute ALL SQO scores
if (SQO == "all"){
mambi.score <- MAMBI(DB, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid") %>%
dplyr::rename(B13_Stratum = Stratum) %>%
dplyr::mutate(Score = MAMBI_Score, Category = New_MAMBI_Condition) %>%
dplyr::mutate(Category_Score = case_when(Category == "Reference" ~ 1, Category == "Low Disturbance" ~ 2, Category == "Moderate Disturbance" ~ 3, Category == "High Disturbance" ~ 4))
rbi.scores <- RBI(DB)
ibi.scores <- IBI(DB)
bri.scores <- BRI(DB)
# We need to incorporate RIVPACS. Once we have this we will take the median of RIVPACS, IBI, BRI, RBI and report back one overall score (MBI?)
# Once this is done, we will add this to the final output.
# For RIVPACS, we're simply going to write a wrapper function and add this to SQOUnified.
# If you run into problems, call D. Gillet to get more clarifaction.
final.scores <- mambi.score %>%
dplyr::full_join(bri.scores) %>%
dplyr::full_join(rbi.scores) %>%
dplyr::full_join(ibi.scores) %>% # will add other scores to this data frame as they are computed
dplyr::select("StationID", "Replicate", "SampleDate", "B13_Stratum", "Index", "Score",
"Category", "Category_Score", "Use_MAMBI") %>%
dplyr::arrange(StationID, SampleDate, Replicate)
} else {
mambi.score <- MAMBI(DB, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid")
final.scores <- mambi.score %>%
dplyr::left_join(rbi.scores, by = c("StationID", "Replicate")) %>%
dplyr::left_join(ibi.scores, by = c("StationID", "Replicate")) %>%
dplyr::left_join(bri.scores, by = c("StationID", "Replicate")) %>%
dplyr::group_by(StationID, SampleDate, Replicate)
# will add other scores to this data frame as they are computed
}
length(unique(benthic_data$StationID))
View(assignment)
benthic_data <- grab %>%
dplyr::inner_join(station_occupation, by = c('stationid','sampledate' = 'occupationdate')) %>%
dplyr::inner_join(infauna, by = c('stationid','sampledate')) %>%
dplyr::select('stationid','replicate','sampledate','latitude','longitude','taxon','abundance','salinity', 'stratum', 'exclude') %>%
dplyr::mutate_if(is.numeric, list(~na_if(., -88))) %>%
dplyr::rename(species = taxon) %>%
dplyr::rename(StationID = stationid, Replicate = replicate, SampleDate = sampledate, Latitude = latitude, Longitude = longitude, Species = species, Abundance = abundance, Salinity = salinity, Stratum = stratum, Exclude = exclude)
View(benthic_data)
unique(benthic_data$Salinity)
save(benthic_data, file = "data/benthic_data.Rdata")
write.csv(benthic_data, file = "data/benthic_data.csv", row.names = FALSE)
load("P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/data/benthic_data.Rdata")
DB = benthic_data
# Compute ALL SQO scores
if (SQO == "all"){
mambi.score <- MAMBI(DB, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid") %>%
dplyr::rename(B13_Stratum = Stratum) %>%
dplyr::mutate(Score = MAMBI_Score, Category = New_MAMBI_Condition) %>%
dplyr::mutate(Category_Score = case_when(Category == "Reference" ~ 1, Category == "Low Disturbance" ~ 2, Category == "Moderate Disturbance" ~ 3, Category == "High Disturbance" ~ 4))
rbi.scores <- RBI(DB)
ibi.scores <- IBI(DB)
bri.scores <- BRI(DB)
# We need to incorporate RIVPACS. Once we have this we will take the median of RIVPACS, IBI, BRI, RBI and report back one overall score (MBI?)
# Once this is done, we will add this to the final output.
# For RIVPACS, we're simply going to write a wrapper function and add this to SQOUnified.
# If you run into problems, call D. Gillet to get more clarifaction.
final.scores <- mambi.score %>%
dplyr::full_join(bri.scores) %>%
dplyr::full_join(rbi.scores) %>%
dplyr::full_join(ibi.scores) %>% # will add other scores to this data frame as they are computed
dplyr::select("StationID", "Replicate", "SampleDate", "B13_Stratum", "Index", "Score",
"Category", "Category_Score", "Use_MAMBI") %>%
dplyr::arrange(StationID, SampleDate, Replicate)
} else {
mambi.score <- MAMBI(DB, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid")
final.scores <- mambi.score %>%
dplyr::left_join(rbi.scores, by = c("StationID", "Replicate")) %>%
dplyr::left_join(ibi.scores, by = c("StationID", "Replicate")) %>%
dplyr::left_join(bri.scores, by = c("StationID", "Replicate")) %>%
dplyr::group_by(StationID, SampleDate, Replicate)
# will add other scores to this data frame as they are computed
}
rbi.scores <- RBI(DB)
load("P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/data/TidalFresh_Standards.Rdata")
load("P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/data/Taxonomic_Info.Rdata")
load("P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/data/Saline_Standards.Rdata")
load("P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/data/EG_Ref.Rdata")
# Compute ALL SQO scores
if (SQO == "all"){
mambi.score <- MAMBI(DB, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid") %>%
dplyr::rename(B13_Stratum = Stratum) %>%
dplyr::mutate(Score = MAMBI_Score, Category = New_MAMBI_Condition) %>%
dplyr::mutate(Category_Score = case_when(Category == "Reference" ~ 1, Category == "Low Disturbance" ~ 2, Category == "Moderate Disturbance" ~ 3, Category == "High Disturbance" ~ 4))
rbi.scores <- RBI(DB)
ibi.scores <- IBI(DB)
bri.scores <- BRI(DB)
# We need to incorporate RIVPACS. Once we have this we will take the median of RIVPACS, IBI, BRI, RBI and report back one overall score (MBI?)
# Once this is done, we will add this to the final output.
# For RIVPACS, we're simply going to write a wrapper function and add this to SQOUnified.
# If you run into problems, call D. Gillet to get more clarifaction.
final.scores <- mambi.score %>%
dplyr::full_join(bri.scores) %>%
dplyr::full_join(rbi.scores) %>%
dplyr::full_join(ibi.scores) %>% # will add other scores to this data frame as they are computed
dplyr::select("StationID", "Replicate", "SampleDate", "B13_Stratum", "Index", "Score",
"Category", "Category_Score", "Use_MAMBI") %>%
dplyr::arrange(StationID, SampleDate, Replicate)
} else {
mambi.score <- MAMBI(DB, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid")
final.scores <- mambi.score %>%
dplyr::left_join(rbi.scores, by = c("StationID", "Replicate")) %>%
dplyr::left_join(ibi.scores, by = c("StationID", "Replicate")) %>%
dplyr::left_join(bri.scores, by = c("StationID", "Replicate")) %>%
dplyr::group_by(StationID, SampleDate, Replicate)
# will add other scores to this data frame as they are computed
}
source('P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/R/MAMBI.R', echo=TRUE)
# Compute ALL SQO scores
if (SQO == "all"){
mambi.score <- MAMBI(DB, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid") %>%
dplyr::rename(B13_Stratum = Stratum) %>%
dplyr::mutate(Score = MAMBI_Score, Category = New_MAMBI_Condition) %>%
dplyr::mutate(Category_Score = case_when(Category == "Reference" ~ 1, Category == "Low Disturbance" ~ 2, Category == "Moderate Disturbance" ~ 3, Category == "High Disturbance" ~ 4))
rbi.scores <- RBI(DB)
ibi.scores <- IBI(DB)
bri.scores <- BRI(DB)
# We need to incorporate RIVPACS. Once we have this we will take the median of RIVPACS, IBI, BRI, RBI and report back one overall score (MBI?)
# Once this is done, we will add this to the final output.
# For RIVPACS, we're simply going to write a wrapper function and add this to SQOUnified.
# If you run into problems, call D. Gillet to get more clarifaction.
final.scores <- mambi.score %>%
dplyr::full_join(bri.scores) %>%
dplyr::full_join(rbi.scores) %>%
dplyr::full_join(ibi.scores) %>% # will add other scores to this data frame as they are computed
dplyr::select("StationID", "Replicate", "SampleDate", "B13_Stratum", "Index", "Score",
"Category", "Category_Score", "Use_MAMBI") %>%
dplyr::arrange(StationID, SampleDate, Replicate)
} else {
mambi.score <- MAMBI(DB, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid")
final.scores <- mambi.score %>%
dplyr::left_join(rbi.scores, by = c("StationID", "Replicate")) %>%
dplyr::left_join(ibi.scores, by = c("StationID", "Replicate")) %>%
dplyr::left_join(bri.scores, by = c("StationID", "Replicate")) %>%
dplyr::group_by(StationID, SampleDate, Replicate)
# will add other scores to this data frame as they are computed
}
source('P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/R/MAMBI.R', echo=TRUE)
# Compute ALL SQO scores
if (SQO == "all"){
mambi.score <- MAMBI(DB, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid") %>%
dplyr::rename(B13_Stratum = Stratum) %>%
dplyr::mutate(Score = MAMBI_Score, Category = New_MAMBI_Condition) %>%
dplyr::mutate(Category_Score = case_when(Category == "Reference" ~ 1, Category == "Low Disturbance" ~ 2, Category == "Moderate Disturbance" ~ 3, Category == "High Disturbance" ~ 4))
rbi.scores <- RBI(DB)
ibi.scores <- IBI(DB)
bri.scores <- BRI(DB)
# We need to incorporate RIVPACS. Once we have this we will take the median of RIVPACS, IBI, BRI, RBI and report back one overall score (MBI?)
# Once this is done, we will add this to the final output.
# For RIVPACS, we're simply going to write a wrapper function and add this to SQOUnified.
# If you run into problems, call D. Gillet to get more clarifaction.
final.scores <- mambi.score %>%
dplyr::full_join(bri.scores) %>%
dplyr::full_join(rbi.scores) %>%
dplyr::full_join(ibi.scores) %>% # will add other scores to this data frame as they are computed
dplyr::select("StationID", "Replicate", "SampleDate", "B13_Stratum", "Index", "Score",
"Category", "Category_Score", "Use_MAMBI") %>%
dplyr::arrange(StationID, SampleDate, Replicate)
} else {
mambi.score <- MAMBI(DB, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid")
final.scores <- mambi.score %>%
dplyr::left_join(rbi.scores, by = c("StationID", "Replicate")) %>%
dplyr::left_join(ibi.scores, by = c("StationID", "Replicate")) %>%
dplyr::left_join(bri.scores, by = c("StationID", "Replicate")) %>%
dplyr::group_by(StationID, SampleDate, Replicate)
# will add other scores to this data frame as they are computed
}
BenthicData = DB
# Compute ALL SQO scores
if (SQO == "all"){
mambi.score <- MAMBI(DB, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid") %>%
dplyr::rename(B13_Stratum = Stratum) %>%
dplyr::mutate(Score = MAMBI_Score, Category = New_MAMBI_Condition) %>%
dplyr::mutate(Category_Score = case_when(Category == "Reference" ~ 1, Category == "Low Disturbance" ~ 2, Category == "Moderate Disturbance" ~ 3, Category == "High Disturbance" ~ 4))
rbi.scores <- RBI(DB)
ibi.scores <- IBI(DB)
bri.scores <- BRI(DB)
# We need to incorporate RIVPACS. Once we have this we will take the median of RIVPACS, IBI, BRI, RBI and report back one overall score (MBI?)
# Once this is done, we will add this to the final output.
# For RIVPACS, we're simply going to write a wrapper function and add this to SQOUnified.
# If you run into problems, call D. Gillet to get more clarifaction.
final.scores <- mambi.score %>%
dplyr::full_join(bri.scores) %>%
dplyr::full_join(rbi.scores) %>%
dplyr::full_join(ibi.scores) %>% # will add other scores to this data frame as they are computed
dplyr::select("StationID", "Replicate", "SampleDate", "B13_Stratum", "Index", "Score",
"Category", "Category_Score", "Use_MAMBI") %>%
dplyr::arrange(StationID, SampleDate, Replicate)
} else {
mambi.score <- MAMBI(DB, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid")
final.scores <- mambi.score %>%
dplyr::left_join(rbi.scores, by = c("StationID", "Replicate")) %>%
dplyr::left_join(ibi.scores, by = c("StationID", "Replicate")) %>%
dplyr::left_join(bri.scores, by = c("StationID", "Replicate")) %>%
dplyr::group_by(StationID, SampleDate, Replicate)
# will add other scores to this data frame as they are computed
}
Input_File.0<-BenthicData %>%
dplyr::mutate(Species_ended_in_sp=(str_detect(Species," sp$")), Taxon=(str_replace(Species, " sp$",""))) %>%
dplyr::mutate(Coast=(ifelse(Longitude<=-115,"West","Gulf-East")))%>%
dplyr::mutate(SalZone=case_when(Salinity>30&Salinity<=40&Coast=="Gulf-East"~"EH", Salinity>18&Salinity<=30&Coast=="Gulf-East"~"PH", Salinity>5&Salinity<=18~"MH",
Salinity>0.2&Salinity<=5~"OH", Salinity>=0&Salinity<=0.2~"TF", Salinity>40~"HH",
Salinity>30&Salinity<=40&Coast=="West"~"WEH", Salinity>18&Salinity<=30&Coast=="West"~"WPH"))
EG_Ref<-read.csv(EG_File_Name, stringsAsFactors = F, na.strings = "") %>% select(.,Taxon, Exclude, EG=EG_Scheme) %>% mutate(EG=(ifelse(Taxon=="Oligochaeta", "V", EG)))
azoic.samples<-Input_File.0 %>% dplyr::filter(Taxon=="No Organisms Present") %>%
dplyr::select(StationID, Replicate, SampleDate, Latitude, Longitude, SalZone, Stratum) %>%
dplyr::mutate(if(is_empty(azoic.samples != TRUE)) {AMBI_Score = 7  & S=0 & H=0 & Oligo_pct=0 & MAMBI_Score=0 & Orig_MAMBI_Condition="Bad" & New_MAMBI_Condition="High Disturbance" & Use_MAMBI="Yes" & Use_AMBI="Yes - Azoic" & YesEG=NA})
azoic.samples<-Input_File.0 %>% dplyr::filter(Taxon=="No Organisms Present") %>%
dplyr::select(StationID, Replicate, SampleDate, Latitude, Longitude, SalZone, Stratum)
azoic.samples <- dplyr::mutate(if(is_empty(azoic.samples != TRUE)) {AMBI_Score = 7  & S=0 & H=0 & Oligo_pct=0 & MAMBI_Score=0 & Orig_MAMBI_Condition="Bad" & New_MAMBI_Condition="High Disturbance" & Use_MAMBI="Yes" & Use_AMBI="Yes - Azoic" & YesEG=NA})
azoic.samples <- dplyr::mutate(if(is.empty(azoic.samples != TRUE)) {AMBI_Score = 7  & S=0 & H=0 & Oligo_pct=0 & MAMBI_Score=0 & Orig_MAMBI_Condition="Bad" & New_MAMBI_Condition="High Disturbance" & Use_MAMBI="Yes" & Use_AMBI="Yes - Azoic" & YesEG=NA})
azoic.samples <- dplyr::mutate(if(empty(azoic.samples != TRUE)) {AMBI_Score = 7  & S=0 & H=0 & Oligo_pct=0 & MAMBI_Score=0 & Orig_MAMBI_Condition="Bad" & New_MAMBI_Condition="High Disturbance" & Use_MAMBI="Yes" & Use_AMBI="Yes - Azoic" & YesEG=NA})
View(azoic.samples)
azoic.samples <- dplyr::mutate(if(is.empty(azoic.samples != TRUE)) {AMBI_Score = 7  & S=0 & H=0 & Oligo_pct=0 & MAMBI_Score=0 & Orig_MAMBI_Condition="Bad" & New_MAMBI_Condition="High Disturbance" & Use_MAMBI="Yes" & Use_AMBI="Yes - Azoic" & YesEG=NA})
