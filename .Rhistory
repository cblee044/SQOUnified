# For RIVPACS, we're simply going to write a wrapper function and add this to SQOUnified.
# If you run into problems, call D. Gillet to get more clarifaction.
final.scores <- mambi.score %>%
dplyr::full_join(bri.scores) %>%
dplyr::full_join(rbi.scores) %>%
dplyr::full_join(ibi.scores) %>% # will add other scores to this data frame as they are computed
dplyr::select("StationID", "Replicate", "SampleDate", "B13_Stratum", "Index", "Score",
"Category", "Category_Score",
"Use_AMBI", "Use_MAMBI")
} else {
mambi.score <- MAMBI(DB, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid")
final.scores <- mambi.score %>%
dplyr::left_join(rbi.scores, by = c("StationID", "Replicate")) %>%
dplyr::left_join(ibi.scores, by = c("StationID", "Replicate")) %>%
dplyr::left_join(bri.scores, by = c("StationID", "Replicate"))
# will add other scores to this data frame as they are computed
}
View(rbi.scores)
View(DB)
View(DB)
source('P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/R/RBI.R', echo=TRUE)
# Compute ALL SQO scores
if (SQO == "all"){
mambi.score <- MAMBI(DB, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid") %>%
dplyr::mutate(Score = MAMBI_Score, Category = New_MAMBI_Condition) %>%
dplyr::mutate(Category_Score = case_when(Category == "Reference" ~ 1, Category == "Low Disturbance" ~ 2, Category == "Moderate Disturbance" ~ 3, Category == "High Disturbance" ~ 4))
rbi.scores <- RBI(DB)
ibi.scores <- IBI(DB)
bri.scores <- BRI(DB)
# We need to incorporate RIVPACS. Once we have this we will take the median of RIVPACS, IBI, BRI, RBI and report back one overall score (MBI?)
# Once this is done, we will add this to the final output.
# For RIVPACS, we're simply going to write a wrapper function and add this to SQOUnified.
# If you run into problems, call D. Gillet to get more clarifaction.
final.scores <- mambi.score %>%
dplyr::full_join(bri.scores) %>%
dplyr::full_join(rbi.scores) %>%
dplyr::full_join(ibi.scores) %>% # will add other scores to this data frame as they are computed
dplyr::select("StationID", "Replicate", "SampleDate", "B13_Stratum", "Index", "Score",
"Category", "Category_Score", "Use_MAMBI")
} else {
mambi.score <- MAMBI(DB, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid")
final.scores <- mambi.score %>%
dplyr::left_join(rbi.scores, by = c("StationID", "Replicate")) %>%
dplyr::left_join(ibi.scores, by = c("StationID", "Replicate")) %>%
dplyr::left_join(bri.scores, by = c("StationID", "Replicate"))
# will add other scores to this data frame as they are computed
}
View(final.scores)
View(rbi.scores)
source('P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/R/RBI.R', echo=TRUE)
# Compute ALL SQO scores
if (SQO == "all"){
mambi.score <- MAMBI(DB, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid") %>%
dplyr::mutate(Score = MAMBI_Score, Category = New_MAMBI_Condition) %>%
dplyr::mutate(Category_Score = case_when(Category == "Reference" ~ 1, Category == "Low Disturbance" ~ 2, Category == "Moderate Disturbance" ~ 3, Category == "High Disturbance" ~ 4))
rbi.scores <- RBI(DB)
ibi.scores <- IBI(DB)
bri.scores <- BRI(DB)
# We need to incorporate RIVPACS. Once we have this we will take the median of RIVPACS, IBI, BRI, RBI and report back one overall score (MBI?)
# Once this is done, we will add this to the final output.
# For RIVPACS, we're simply going to write a wrapper function and add this to SQOUnified.
# If you run into problems, call D. Gillet to get more clarifaction.
final.scores <- mambi.score %>%
dplyr::full_join(bri.scores) %>%
dplyr::full_join(rbi.scores) %>%
dplyr::full_join(ibi.scores) %>% # will add other scores to this data frame as they are computed
dplyr::select("StationID", "Replicate", "SampleDate", "B13_Stratum", "Index", "Score",
"Category", "Category_Score", "Use_MAMBI")
} else {
mambi.score <- MAMBI(DB, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid")
final.scores <- mambi.score %>%
dplyr::left_join(rbi.scores, by = c("StationID", "Replicate")) %>%
dplyr::left_join(ibi.scores, by = c("StationID", "Replicate")) %>%
dplyr::left_join(bri.scores, by = c("StationID", "Replicate"))
# will add other scores to this data frame as they are computed
}
final.scores <- final.scores %>% group_by(StationID, SampleDate, Replicate)
View(final.scores)
View(DB)
View(DB)
# Prepare the given data frame so that we can compute the RBI score and categories
rbi_data <- DB %>%
inner_join(Taxonomic_Info, by = c('Species' = 'Taxon')) %>%
dplyr::mutate_if(is.numeric, list(~na_if(., -88))) %>%
dplyr::add_count(Species) %>%
dplyr::select('StationID','SampleDate', 'Replicate','Species','Abundance','Stratum', 'Phylum', 'Subphylum', 'n') %>%
dplyr::group_by(Stratum, StationID, Replicate, SampleDate, Species, Abundance, Phylum, Subphylum) %>%
dplyr::rename(NumOfTaxa = n) %>%
dplyr::rename(B13_Stratum = Stratum)
ibi_data <- rbi_data %>%
group_by(B13_Stratum, SampleDate, StationID, Replicate) %>%
summarise(NumOfTaxa = sum(NumOfTaxa))
View(ibi_data)
# columns needed in RBI: B13_Stratum, StationID, Replicate, Phylum, NumofMolluscTaxa
rbi2 <- rbi_data %>%
dplyr::filter(Phylum == "MOLLUSCA") %>%
dplyr::group_by(B13_Stratum, StationID, SampleDate, Replicate, Phylum, NumOfTaxa) %>%
dplyr::select(B13_Stratum, StationID, SampleDate, Replicate, Phylum, NumOfTaxa) %>%
dplyr::group_by(B13_Stratum, StationID, SampleDate, Replicate, Phylum) %>%
dplyr::summarise(NumOfMolluscTaxa = sum(NumOfTaxa))
### SQO RBI -3
rbi3 <- rbi_data %>%
dplyr::filter(Subphylum == "Crustacea") %>%
dplyr::group_by(B13_Stratum, StationID, SampleDate, Replicate, Subphylum) %>%
dplyr::select(B13_Stratum, StationID, SampleDate, Replicate, Subphylum, NumOfTaxa) %>%
dplyr::summarise(NumOfCrustaceanTaxa = sum(NumOfTaxa))
### SQO RBI -4
rbi4 <- rbi_data %>%
dplyr::filter(Subphylum == "Crustacea") %>%
dplyr::group_by(B13_Stratum, StationID, SampleDate, Replicate, Subphylum) %>%
dplyr::select(B13_Stratum, StationID, SampleDate, Replicate, Subphylum, Abundance) %>%
dplyr::summarise(CrustaceanAbun = sum(Abundance))
### SQO RBI -5
rbi5 <- rbi_data %>%
dplyr::filter(Species == "Monocorophium insidiosum") %>%
dplyr::group_by(B13_Stratum, StationID, SampleDate, Replicate, Species) %>%
dplyr::summarise(M_insidiosumAbun = sum(Abundance))
### SQO RBI -6
rbi6 <- rbi_data %>%
dplyr::filter(Species == "Asthenothaerus diegensis") %>%
dplyr::group_by(B13_Stratum, StationID, SampleDate, Replicate, Species) %>%
dplyr::summarise(A_diegensisAbun = sum(Abundance))
### SQO RBI -7
rbi7 <- rbi_data %>%
dplyr::filter(Species == "Goniada littorea") %>%
dplyr::group_by(B13_Stratum, StationID, SampleDate, Replicate, Species) %>%
dplyr::summarise(G_littoreaAbun = sum(Abundance))
### SQO RBI -8
rbi8 <- rbi_data %>%
dplyr::filter(Species == "Capitella capitata Cmplx") %>%
dplyr::group_by(B13_Stratum, StationID, SampleDate, Replicate, Species) %>%
dplyr::summarise(CapitellaAbun = sum(Abundance))
### SQO RBI -9
rbi9 <- rbi_data %>%
dplyr::filter(Species == "Oligochaeta") %>%
dplyr::group_by(B13_Stratum, StationID, SampleDate, Replicate, Species) %>%
dplyr::summarise(OligochaetaAbun = sum(Abundance))
View(rbi.scores)
source('P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/R/RBI.R', echo=TRUE)
rbi.scores <- RBI(DB)
# Compute ALL SQO scores
if (SQO == "all"){
mambi.score <- MAMBI(DB, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid") %>%
dplyr::mutate(Score = MAMBI_Score, Category = New_MAMBI_Condition) %>%
dplyr::mutate(Category_Score = case_when(Category == "Reference" ~ 1, Category == "Low Disturbance" ~ 2, Category == "Moderate Disturbance" ~ 3, Category == "High Disturbance" ~ 4))
rbi.scores <- RBI(DB)
ibi.scores <- IBI(DB)
bri.scores <- BRI(DB)
# We need to incorporate RIVPACS. Once we have this we will take the median of RIVPACS, IBI, BRI, RBI and report back one overall score (MBI?)
# Once this is done, we will add this to the final output.
# For RIVPACS, we're simply going to write a wrapper function and add this to SQOUnified.
# If you run into problems, call D. Gillet to get more clarifaction.
final.scores <- mambi.score %>%
dplyr::full_join(bri.scores) %>%
dplyr::full_join(rbi.scores) %>%
dplyr::full_join(ibi.scores) %>% # will add other scores to this data frame as they are computed
dplyr::select("StationID", "Replicate", "SampleDate", "B13_Stratum", "Index", "Score",
"Category", "Category_Score", "Use_MAMBI")
} else {
mambi.score <- MAMBI(DB, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid")
final.scores <- mambi.score %>%
dplyr::left_join(rbi.scores, by = c("StationID", "Replicate")) %>%
dplyr::left_join(ibi.scores, by = c("StationID", "Replicate")) %>%
dplyr::left_join(bri.scores, by = c("StationID", "Replicate")) %>%
dplyr::group_by(StationID, SampleDate, Replicate)
# will add other scores to this data frame as they are computed
}
View(DB)
source('P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/R/IBI.R', echo=TRUE)
source('P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/R/BRI.R', echo=TRUE)
source('P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/R/IBI.R', echo=TRUE)
# Compute ALL SQO scores
if (SQO == "all"){
mambi.score <- MAMBI(DB, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid") %>%
dplyr::mutate(Score = MAMBI_Score, Category = New_MAMBI_Condition) %>%
dplyr::mutate(Category_Score = case_when(Category == "Reference" ~ 1, Category == "Low Disturbance" ~ 2, Category == "Moderate Disturbance" ~ 3, Category == "High Disturbance" ~ 4))
rbi.scores <- RBI(DB)
ibi.scores <- IBI(DB)
bri.scores <- BRI(DB)
# We need to incorporate RIVPACS. Once we have this we will take the median of RIVPACS, IBI, BRI, RBI and report back one overall score (MBI?)
# Once this is done, we will add this to the final output.
# For RIVPACS, we're simply going to write a wrapper function and add this to SQOUnified.
# If you run into problems, call D. Gillet to get more clarifaction.
final.scores <- mambi.score %>%
dplyr::full_join(bri.scores) %>%
dplyr::full_join(rbi.scores) %>%
dplyr::full_join(ibi.scores) %>% # will add other scores to this data frame as they are computed
dplyr::select("StationID", "Replicate", "SampleDate", "B13_Stratum", "Index", "Score",
"Category", "Category_Score", "Use_MAMBI")
} else {
mambi.score <- MAMBI(DB, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid")
final.scores <- mambi.score %>%
dplyr::left_join(rbi.scores, by = c("StationID", "Replicate")) %>%
dplyr::left_join(ibi.scores, by = c("StationID", "Replicate")) %>%
dplyr::left_join(bri.scores, by = c("StationID", "Replicate")) %>%
dplyr::group_by(StationID, SampleDate, Replicate)
# will add other scores to this data frame as they are computed
}
View(Taxonomic_Info)
# Prepare the given data frame so that we can compute the RBI score and categories
ibi_data <- DB %>%
inner_join(Taxonomic_Info, by = c('Species' = 'Taxon')) %>%
dplyr::mutate_if(is.numeric, list(~na_if(., -88))) %>%
dplyr::add_count(Species) %>%
dplyr::select('StationID','SampleDate', 'Replicate','Species','Abundance','Stratum', 'Phylum', 'Subphylum', 'IBI.Sensitive.Taxa', 'n') %>%
dplyr::group_by(Stratum, StationID, SampleDate, Replicate, Species, Abundance, Phylum, Subphylum) %>%
dplyr::rename(NumOfTaxa = n) %>%
dplyr::rename(B13_Stratum = Stratum)
### SQO IBI - 1
# columns needed in RBI: B13_Stratum, StationID, Replicate, Phylum, NumofTaxa
ibi1 <- ibi_data %>%
group_by(B13_Stratum, StationID, Replicate) %>%
summarise(NumOfTaxa = sum(NumOfTaxa))
### SQO IBI - 2
ibi2 <- ibi_data %>%
dplyr::filter(Phylum == "MOLLUSCA") %>%
dplyr::group_by(B13_Stratum, StationID, Replicate, Phylum, NumOfTaxa) %>%
dplyr::select(B13_Stratum, StationID, Replicate, Phylum, NumOfTaxa) %>%
dplyr::group_by(B13_Stratum, StationID, Replicate, Phylum) %>%
dplyr::summarise(NumOfMolluscTaxa = sum(NumOfTaxa))
### SQO RBI - 3 - 1
ibi3_1 <- ibi_data %>%
dplyr::filter(grepl("Notomastus", Species)) %>%
dplyr::group_by(B13_Stratum, StationID, Replicate, Species, Abundance) %>%
dplyr::select(B13_Stratum, StationID, Replicate, Species, Abundance)
### SQO IBI - 3 - 2
ibi3_2 <- ibi3_1 %>%
dplyr::group_by(B13_Stratum, StationID, Replicate) %>%
dplyr::summarise(NotomastusAbun = sum(Abundance))
### SQO IBI - 4 - 1
ibi4_1 <- ibi_data %>%
dplyr::filter(IBI.Sensitive.Taxa != 0) %>%
dplyr::group_by(B13_Stratum, StationID, Replicate, IBI.Sensitive.Taxa, Abundance) %>%
dplyr::add_count(Abundance) %>%
dplyr::rename(SensTaxa = n) %>%
dplyr::group_by(B13_Stratum, StationID, Replicate, IBI.Sensitive.Taxa) %>%
dplyr::summarise(SensTaxa = sum(SensTaxa))
### SQO IBI - 4 - 2
ibi4_2 <- ibi1 %>%
dplyr::inner_join(ibi4_1, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::mutate(PctSensTaxa = (SensTaxa/NumOfTaxa)*100) %>%
dplyr::select(B13_Stratum, StationID, Replicate, PctSensTaxa)
### Reference ranges for IBI metrics in Southern California Marine Bays
### [ Table 5.4 (p. 77, Technical Manual, 2014) ]
ibi_ref_ranges_table <- data.frame(ref_low = c(13, 2, 0, 19),
ref_high = c(99, 25, 59, 47.1))
row.names(ibi_ref_ranges_table) <- c("NumOfTaxa", "NumOfMolluscTaxa", "NotomastusAbun", "PctSensTaxa")
### IBI category response ranges for Southern California Marine Bays
### [ Table 5.5 (p. 77, Technical Manual, 2014) ]
ibi_category_response_table <- data.frame(ibi_score = as.factor(c(0, 1, 2, 3, 4)),
category = as.factor(c("Reference",
"Low Disturbance",
"Moderate Disturbance",
"High Disturbance",
"High Disturbance")),
category_score = as.factor(c(1, 2, 3, 4, 4)))
### B13 IBI Metrics:
# We stitch together all the necessary IBI metrics to determine the IBI index.
# Each of the metrics is then compared to the tables listed above (Table 5.4 and Table 5.5) to determine the IBI score,
# the IBI Category, and IBI Category Score
ibi_metrics <- ibi1 %>%
dplyr::full_join(ibi2, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::full_join(ibi3_1, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::full_join(ibi3_2, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::full_join(ibi4_1, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::full_join(ibi4_2, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::select(B13_Stratum, StationID, SampleDate, Replicate, NumOfTaxa, NumOfMolluscTaxa, NotomastusAbun, PctSensTaxa) %>%
# We replace any NAs with 0 so that we can compare the values to the tables listed above
dplyr::mutate(NotomastusAbun = replace_na(NotomastusAbun, 0)) %>%
# The IBI score is set to zero before comparison the reference range.
dplyr::mutate(Score = 0) %>%
# For each metric that is out of the reference range (above or below), the IBI score goes up by one.
dplyr::mutate(Score = if_else((NumOfTaxa < ibi_ref_ranges_table["NumOfTaxa",]$ref_low  | NumOfTaxa > ibi_ref_ranges_table["NumOfTaxa",]$ref_high),
Score + 1, Score)) %>%
dplyr::mutate(Score = if_else((NumOfMolluscTaxa < ibi_ref_ranges_table["NumOfMolluscTaxa",]$ref_low  | NumOfMolluscTaxa > ibi_ref_ranges_table["NumOfMolluscTaxa",]$ref_high),
Score + 1, Score)) %>%
dplyr::mutate(Score = if_else((NotomastusAbun < ibi_ref_ranges_table["NotomastusAbun",]$ref_low  | NotomastusAbun > ibi_ref_ranges_table["NotomastusAbun",]$ref_high),
Score + 1, Score)) %>%
dplyr::mutate(Score = if_else((PctSensTaxa < ibi_ref_ranges_table["PctSensTaxa",]$ref_low  | PctSensTaxa > ibi_ref_ranges_table["PctSensTaxa",]$ref_high),
Score + 1, Score)) %>%
# The IBI score is then compared to condition category response ranges (Table 5.5) to determine the IBI category and category score.
dplyr::mutate(Category = case_when(Score == 0 ~ "Reference", Score == 1 ~ "Low Disturbance", Score == 2 ~ "Moderate Disturbance", (Score == 3 | Score == 4) ~ "High Disturbance")) %>%
dplyr::mutate(Category_Score = case_when(Score == 0 ~ 1, Score == 1 ~ 2, Score == 2 ~ 3, (Score == 3 | Score == 4) ~ 4)) %>%
dplyr::mutate(Index = "IBI")
View(ibi1)
source('P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/R/IBI.R', echo=TRUE)
# Compute ALL SQO scores
if (SQO == "all"){
mambi.score <- MAMBI(DB, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid") %>%
dplyr::mutate(Score = MAMBI_Score, Category = New_MAMBI_Condition) %>%
dplyr::mutate(Category_Score = case_when(Category == "Reference" ~ 1, Category == "Low Disturbance" ~ 2, Category == "Moderate Disturbance" ~ 3, Category == "High Disturbance" ~ 4))
rbi.scores <- RBI(DB)
ibi.scores <- IBI(DB)
bri.scores <- BRI(DB)
# We need to incorporate RIVPACS. Once we have this we will take the median of RIVPACS, IBI, BRI, RBI and report back one overall score (MBI?)
# Once this is done, we will add this to the final output.
# For RIVPACS, we're simply going to write a wrapper function and add this to SQOUnified.
# If you run into problems, call D. Gillet to get more clarifaction.
final.scores <- mambi.score %>%
dplyr::full_join(bri.scores) %>%
dplyr::full_join(rbi.scores) %>%
dplyr::full_join(ibi.scores) %>% # will add other scores to this data frame as they are computed
dplyr::select("StationID", "Replicate", "SampleDate", "B13_Stratum", "Index", "Score",
"Category", "Category_Score", "Use_MAMBI")
} else {
mambi.score <- MAMBI(DB, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid")
final.scores <- mambi.score %>%
dplyr::left_join(rbi.scores, by = c("StationID", "Replicate")) %>%
dplyr::left_join(ibi.scores, by = c("StationID", "Replicate")) %>%
dplyr::left_join(bri.scores, by = c("StationID", "Replicate")) %>%
dplyr::group_by(StationID, SampleDate, Replicate)
# will add other scores to this data frame as they are computed
}
View(mambi.score)
View(mambi.score)
View(ibi4_1)
### SQO IBI - 4 - 2
ibi4_2 <- ibi1 %>%
dplyr::inner_join(ibi4_1, by = c("B13_Stratum", "StationID", "SampleDate", "Replicate")) %>%
dplyr::mutate(PctSensTaxa = (SensTaxa/NumOfTaxa)*100) %>%
dplyr::select(B13_Stratum, StationID, Replicate, PctSensTaxa)
# Prepare the given data frame so that we can compute the RBI score and categories
ibi_data <- DB %>%
inner_join(Taxonomic_Info, by = c('Species' = 'Taxon')) %>%
dplyr::mutate_if(is.numeric, list(~na_if(., -88))) %>%
dplyr::add_count(Species) %>%
dplyr::select('StationID','SampleDate', 'Replicate','Species','Abundance','Stratum', 'Phylum', 'Subphylum', 'IBI.Sensitive.Taxa', 'n') %>%
dplyr::group_by(Stratum, StationID, SampleDate, Replicate, Species, Abundance, Phylum, Subphylum) %>%
dplyr::rename(NumOfTaxa = n) %>%
dplyr::rename(B13_Stratum = Stratum)
View(ibi_data)
### SQO IBI - 4 - 1
ibi4_1 <- ibi_data %>%
dplyr::filter(IBI.Sensitive.Taxa != 0) %>%
dplyr::group_by(B13_Stratum, StationID, SampleDate, Replicate, IBI.Sensitive.Taxa, Abundance) %>%
dplyr::add_count(Abundance) %>%
dplyr::rename(SensTaxa = n) %>%
dplyr::group_by(B13_Stratum, StationID, Replicate, IBI.Sensitive.Taxa) %>%
dplyr::summarise(SensTaxa = sum(SensTaxa))
View(ibi4_1)
### SQO IBI - 4 - 1
ibi4_1 <- ibi_data %>%
dplyr::filter(IBI.Sensitive.Taxa != 0) %>%
dplyr::group_by(B13_Stratum, StationID, SampleDate, Replicate, IBI.Sensitive.Taxa, Abundance) %>%
dplyr::add_count(Abundance) %>%
dplyr::rename(SensTaxa = n) %>%
dplyr::group_by(B13_Stratum, StationID, SampleDate, Replicate, IBI.Sensitive.Taxa) %>%
dplyr::summarise(SensTaxa = sum(SensTaxa))
View(ibi4_1)
### SQO IBI - 4 - 2
ibi4_2 <- ibi1 %>%
dplyr::inner_join(ibi4_1, by = c("B13_Stratum", "StationID", "SampleDate", "Replicate")) %>%
dplyr::mutate(PctSensTaxa = (SensTaxa/NumOfTaxa)*100) %>%
dplyr::select(B13_Stratum, StationID, SampleDate, Replicate, PctSensTaxa)
### SQO IBI - 1
# columns needed in RBI: B13_Stratum, StationID, Replicate, Phylum, NumofTaxa
ibi1 <- ibi_data %>%
group_by(B13_Stratum, StationID, Replicate) %>%
summarise(NumOfTaxa = sum(NumOfTaxa))
View(ibi1)
### SQO IBI - 1
# columns needed in RBI: B13_Stratum, StationID, Replicate, Phylum, NumofTaxa
ibi1 <- ibi_data %>%
group_by(B13_Stratum, StationID, SampleDate, Replicate) %>%
summarise(NumOfTaxa = sum(NumOfTaxa))
View(ibi1)
source('P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/R/IBI.R', echo=TRUE)
# Compute ALL SQO scores
if (SQO == "all"){
mambi.score <- MAMBI(DB, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid") %>%
dplyr::mutate(Score = MAMBI_Score, Category = New_MAMBI_Condition) %>%
dplyr::mutate(Category_Score = case_when(Category == "Reference" ~ 1, Category == "Low Disturbance" ~ 2, Category == "Moderate Disturbance" ~ 3, Category == "High Disturbance" ~ 4))
rbi.scores <- RBI(DB)
ibi.scores <- IBI(DB)
bri.scores <- BRI(DB)
# We need to incorporate RIVPACS. Once we have this we will take the median of RIVPACS, IBI, BRI, RBI and report back one overall score (MBI?)
# Once this is done, we will add this to the final output.
# For RIVPACS, we're simply going to write a wrapper function and add this to SQOUnified.
# If you run into problems, call D. Gillet to get more clarifaction.
final.scores <- mambi.score %>%
dplyr::full_join(bri.scores) %>%
dplyr::full_join(rbi.scores) %>%
dplyr::full_join(ibi.scores) %>% # will add other scores to this data frame as they are computed
dplyr::select("StationID", "Replicate", "SampleDate", "B13_Stratum", "Index", "Score",
"Category", "Category_Score", "Use_MAMBI")
} else {
mambi.score <- MAMBI(DB, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid")
final.scores <- mambi.score %>%
dplyr::left_join(rbi.scores, by = c("StationID", "Replicate")) %>%
dplyr::left_join(ibi.scores, by = c("StationID", "Replicate")) %>%
dplyr::left_join(bri.scores, by = c("StationID", "Replicate")) %>%
dplyr::group_by(StationID, SampleDate, Replicate)
# will add other scores to this data frame as they are computed
}
# Prepare the given data frame so that we can compute the RBI score and categories
ibi_data <- DB %>%
inner_join(Taxonomic_Info, by = c('Species' = 'Taxon')) %>%
dplyr::mutate_if(is.numeric, list(~na_if(., -88))) %>%
dplyr::add_count(Species) %>%
dplyr::select('StationID','SampleDate', 'Replicate','Species','Abundance','Stratum', 'Phylum', 'Subphylum', 'IBI.Sensitive.Taxa', 'n') %>%
dplyr::group_by(Stratum, StationID, SampleDate, Replicate, Species, Abundance, Phylum, Subphylum) %>%
dplyr::rename(NumOfTaxa = n) %>%
dplyr::rename(B13_Stratum = Stratum)
View(ibi_data)
View(ibi1)
### SQO IBI - 2
ibi2 <- ibi_data %>%
dplyr::filter(Phylum == "MOLLUSCA") %>%
dplyr::group_by(B13_Stratum, StationID, Replicate, Phylum, NumOfTaxa) %>%
dplyr::select(B13_Stratum, SampleDate, StationID, Replicate, Phylum, NumOfTaxa) %>%
dplyr::group_by(B13_Stratum, StationID, SampleDate, Replicate, Phylum) %>%
dplyr::summarise(NumOfMolluscTaxa = sum(NumOfTaxa))
View(ibi2)
### SQO RBI - 3 - 1
ibi3_1 <- ibi_data %>%
dplyr::filter(grepl("Notomastus", Species)) %>%
dplyr::group_by(B13_Stratum, StationID, SampleDate, Replicate, Species, Abundance) %>%
dplyr::select(B13_Stratum, StationID, SampleDate, Replicate, Species, Abundance)
View(ibi3_1)
### SQO IBI - 3 - 2
ibi3_2 <- ibi3_1 %>%
dplyr::group_by(B13_Stratum, StationID, SampleDate, Replicate) %>%
dplyr::summarise(NotomastusAbun = sum(Abundance))
View(ibi3_2)
### SQO IBI - 4 - 1
ibi4_1 <- ibi_data %>%
dplyr::filter(IBI.Sensitive.Taxa != 0) %>%
dplyr::group_by(B13_Stratum, StationID, SampleDate, Replicate, IBI.Sensitive.Taxa, Abundance) %>%
dplyr::add_count(Abundance) %>%
dplyr::rename(SensTaxa = n) %>%
dplyr::group_by(B13_Stratum, StationID, SampleDate, Replicate, IBI.Sensitive.Taxa) %>%
dplyr::summarise(SensTaxa = sum(SensTaxa))
View(ibi4_1)
### SQO IBI - 4 - 2
ibi4_2 <- ibi1 %>%
dplyr::inner_join(ibi4_1, by = c("B13_Stratum", "StationID", "SampleDate", "Replicate")) %>%
dplyr::mutate(PctSensTaxa = (SensTaxa/NumOfTaxa)*100) %>%
dplyr::select(B13_Stratum, StationID, SampleDate, Replicate, PctSensTaxa)
View(ibi4_2)
### Reference ranges for IBI metrics in Southern California Marine Bays
### [ Table 5.4 (p. 77, Technical Manual, 2014) ]
ibi_ref_ranges_table <- data.frame(ref_low = c(13, 2, 0, 19),
ref_high = c(99, 25, 59, 47.1))
row.names(ibi_ref_ranges_table) <- c("NumOfTaxa", "NumOfMolluscTaxa", "NotomastusAbun", "PctSensTaxa")
### IBI category response ranges for Southern California Marine Bays
### [ Table 5.5 (p. 77, Technical Manual, 2014) ]
ibi_category_response_table <- data.frame(ibi_score = as.factor(c(0, 1, 2, 3, 4)),
category = as.factor(c("Reference",
"Low Disturbance",
"Moderate Disturbance",
"High Disturbance",
"High Disturbance")),
category_score = as.factor(c(1, 2, 3, 4, 4)))
### B13 IBI Metrics:
# We stitch together all the necessary IBI metrics to determine the IBI index.
# Each of the metrics is then compared to the tables listed above (Table 5.4 and Table 5.5) to determine the IBI score,
# the IBI Category, and IBI Category Score
ibi_metrics <- ibi1 %>%
dplyr::full_join(ibi2, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::full_join(ibi3_1, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::full_join(ibi3_2, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::full_join(ibi4_1, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::full_join(ibi4_2, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::select(B13_Stratum, StationID, SampleDate, Replicate, NumOfTaxa, NumOfMolluscTaxa, NotomastusAbun, PctSensTaxa) %>%
# We replace any NAs with 0 so that we can compare the values to the tables listed above
dplyr::mutate(NotomastusAbun = replace_na(NotomastusAbun, 0)) %>%
# The IBI score is set to zero before comparison the reference range.
dplyr::mutate(Score = 0) %>%
# For each metric that is out of the reference range (above or below), the IBI score goes up by one.
dplyr::mutate(Score = if_else((NumOfTaxa < ibi_ref_ranges_table["NumOfTaxa",]$ref_low  | NumOfTaxa > ibi_ref_ranges_table["NumOfTaxa",]$ref_high),
Score + 1, Score)) %>%
dplyr::mutate(Score = if_else((NumOfMolluscTaxa < ibi_ref_ranges_table["NumOfMolluscTaxa",]$ref_low  | NumOfMolluscTaxa > ibi_ref_ranges_table["NumOfMolluscTaxa",]$ref_high),
Score + 1, Score)) %>%
dplyr::mutate(Score = if_else((NotomastusAbun < ibi_ref_ranges_table["NotomastusAbun",]$ref_low  | NotomastusAbun > ibi_ref_ranges_table["NotomastusAbun",]$ref_high),
Score + 1, Score)) %>%
dplyr::mutate(Score = if_else((PctSensTaxa < ibi_ref_ranges_table["PctSensTaxa",]$ref_low  | PctSensTaxa > ibi_ref_ranges_table["PctSensTaxa",]$ref_high),
Score + 1, Score)) %>%
# The IBI score is then compared to condition category response ranges (Table 5.5) to determine the IBI category and category score.
dplyr::mutate(Category = case_when(Score == 0 ~ "Reference", Score == 1 ~ "Low Disturbance", Score == 2 ~ "Moderate Disturbance", (Score == 3 | Score == 4) ~ "High Disturbance")) %>%
dplyr::mutate(Category_Score = case_when(Score == 0 ~ 1, Score == 1 ~ 2, Score == 2 ~ 3, (Score == 3 | Score == 4) ~ 4)) %>%
dplyr::mutate(Index = "IBI")
### B13 IBI Metrics:
# We stitch together all the necessary IBI metrics to determine the IBI index.
# Each of the metrics is then compared to the tables listed above (Table 5.4 and Table 5.5) to determine the IBI score,
# the IBI Category, and IBI Category Score
ibi_metrics <- ibi1 %>%
dplyr::full_join(ibi2, by = c("B13_Stratum", "SampleDate", "StationID", "Replicate")) %>%
dplyr::full_join(ibi3_1, by = c("B13_Stratum", "SampleDate", "StationID", "Replicate")) %>%
dplyr::full_join(ibi3_2, by = c("B13_Stratum", "SampleDate", "StationID", "Replicate")) %>%
dplyr::full_join(ibi4_1, by = c("B13_Stratum", "SampleDate", "StationID", "Replicate")) %>%
dplyr::full_join(ibi4_2, by = c("B13_Stratum", "SampleDate", "StationID", "Replicate")) %>%
dplyr::select(B13_Stratum, StationID, SampleDate, Replicate, NumOfTaxa, NumOfMolluscTaxa, NotomastusAbun, PctSensTaxa) %>%
# We replace any NAs with 0 so that we can compare the values to the tables listed above
dplyr::mutate(NotomastusAbun = replace_na(NotomastusAbun, 0)) %>%
# The IBI score is set to zero before comparison the reference range.
dplyr::mutate(Score = 0) %>%
# For each metric that is out of the reference range (above or below), the IBI score goes up by one.
dplyr::mutate(Score = if_else((NumOfTaxa < ibi_ref_ranges_table["NumOfTaxa",]$ref_low  | NumOfTaxa > ibi_ref_ranges_table["NumOfTaxa",]$ref_high),
Score + 1, Score)) %>%
dplyr::mutate(Score = if_else((NumOfMolluscTaxa < ibi_ref_ranges_table["NumOfMolluscTaxa",]$ref_low  | NumOfMolluscTaxa > ibi_ref_ranges_table["NumOfMolluscTaxa",]$ref_high),
Score + 1, Score)) %>%
dplyr::mutate(Score = if_else((NotomastusAbun < ibi_ref_ranges_table["NotomastusAbun",]$ref_low  | NotomastusAbun > ibi_ref_ranges_table["NotomastusAbun",]$ref_high),
Score + 1, Score)) %>%
dplyr::mutate(Score = if_else((PctSensTaxa < ibi_ref_ranges_table["PctSensTaxa",]$ref_low  | PctSensTaxa > ibi_ref_ranges_table["PctSensTaxa",]$ref_high),
Score + 1, Score)) %>%
# The IBI score is then compared to condition category response ranges (Table 5.5) to determine the IBI category and category score.
dplyr::mutate(Category = case_when(Score == 0 ~ "Reference", Score == 1 ~ "Low Disturbance", Score == 2 ~ "Moderate Disturbance", (Score == 3 | Score == 4) ~ "High Disturbance")) %>%
dplyr::mutate(Category_Score = case_when(Score == 0 ~ 1, Score == 1 ~ 2, Score == 2 ~ 3, (Score == 3 | Score == 4) ~ 4)) %>%
dplyr::mutate(Index = "IBI")
View(ibi_metrics)
ibi.scores <- IBI(DB)
View(DB)
