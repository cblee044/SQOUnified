dplyr::rename(NumOfTaxa = n) %>%
dplyr::rename(B13_Stratum = Stratum)
# Prepare the given data frame so that we can compute the RBI score and categories
rbi_data <- DB %>%
inner_join(Taxonomic_Info, by = c('Species' = 'Taxon')) %>%
dplyr::mutate_if(is.numeric, list(~na_if(., -88))) %>%
dplyr::add_count(Species) %>%
dplyr::select('StationID','Replicate','Species','Abundance','Stratum', 'Phylum', 'Subphylum', 'n') %>%
dplyr::group_by(Stratum, StationID, Replicate, Species, Abundance, Phylum, Subphylum) %>%
dplyr::rename(NumOfTaxa = n) %>%
dplyr::rename(B13_Stratum = Stratum)
ibi_data <- rbi_data %>%
group_by(B13_Stratum, StationID, Replicate) %>%
summarise(NumOfTaxa = sum(NumOfTaxa))
# columns needed in RBI: B13_Stratum, StationID, Replicate, Phylum, NumofMolluscTaxa
rbi2 <- rbi_data %>%
dplyr::filter(Phylum == "MOLLUSCA") %>%
dplyr::group_by(B13_Stratum, StationID, Replicate, Phylum, NumOfTaxa) %>%
dplyr::select(B13_Stratum, StationID, Replicate, Phylum, NumOfTaxa) %>%
dplyr::group_by(B13_Stratum, StationID, Replicate, Phylum) %>%
dplyr::summarise(NumOfMolluscTaxa = sum(NumOfTaxa))
### SQO RBI -3
rbi3 <- rbi_data %>%
dplyr::filter(Subphylum == "Crustacea") %>%
dplyr::group_by(B13_Stratum, StationID, Replicate, Subphylum) %>%
dplyr::select(B13_Stratum, StationID, Replicate, Subphylum, NumOfTaxa) %>%
dplyr::summarise(NumOfCrustaceanTaxa = sum(NumOfTaxa))
### SQO RBI -4
rbi4 <- rbi_data %>%
dplyr::filter(Subphylum == "Crustacea") %>%
dplyr::group_by(B13_Stratum, StationID, Replicate, Subphylum) %>%
dplyr::select(B13_Stratum, StationID, Replicate, Subphylum, Abundance) %>%
dplyr::summarise(CrustaceanAbun = sum(Abundance))
### SQO RBI -5
rbi5 <- rbi_data %>%
dplyr::filter(Species == "Monocorophium insidiosum") %>%
dplyr::group_by(B13_Stratum, StationID, Replicate, Species) %>%
dplyr::summarise(M_insidiosumAbun = sum(Abundance))
### SQO RBI -6
rbi6 <- rbi_data %>%
dplyr::filter(Species == "Asthenothaerus diegensis") %>%
dplyr::group_by(B13_Stratum, StationID, Replicate, Species) %>%
dplyr::summarise(A_diegensisAbun = sum(Abundance))
### SQO RBI -7
rbi7 <- rbi_data %>%
dplyr::filter(Species == "Goniada littorea") %>%
dplyr::group_by(B13_Stratum, StationID, Replicate, Species) %>%
dplyr::summarise(G_littoreaAbun = sum(Abundance))
### SQO RBI -8
rbi8 <- rbi_data %>%
dplyr::filter(Species == "Capitella capitata Cmplx") %>%
dplyr::group_by(B13_Stratum, StationID, Replicate, Species) %>%
dplyr::summarise(CapitellaAbun = sum(Abundance))
### SQO RBI -9
rbi9 <- rbi_data %>%
dplyr::filter(Species == "Oligochaeta") %>%
dplyr::group_by(B13_Stratum, StationID, Replicate, Species) %>%
dplyr::summarise(OligochaetaAbun = sum(Abundance))
### B13 RBI Metrics
# We are using a full join because if there are missing values, we might just get an empty data frame.
rbi_metrics <- ibi_data %>%
dplyr::full_join(rbi2, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::full_join(rbi3, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::full_join(rbi4, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::full_join(rbi5, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::full_join(rbi6, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::full_join(rbi7, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::full_join(rbi8, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::full_join(rbi9, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::select(B13_Stratum, StationID, Replicate, NumOfTaxa, NumOfMolluscTaxa, NumOfCrustaceanTaxa, CrustaceanAbun, M_insidiosumAbun, A_diegensisAbun, G_littoreaAbun, CapitellaAbun, OligochaetaAbun)
### RBI Category Thresholds for Southern California Marine Bays
RBI_category_thresholds <- data.frame(ref_low = c(0.27, 0.16, 0.08, 0.08),
ref_high = c(0.27, 0.27, 0.16, 0.08),
category = as.factor(c("Reference",
"Low Disturbance",
"Moderate Disturbance",
"High Disturbance")),
category_score = c(1, 2, 3, 4))
# Compute the RBI scores.
# This was not included in the queries that D. Gillet listed. We went through the Technical Manual (p. 77-78)
# to find the appropriate calculations.
rbi_scores <- rbi_metrics %>%
mutate(scaled_NumTaxa = NumOfTaxa/99) %>%
mutate(scaled_NumMolluscTaxa = NumOfMolluscTaxa/28) %>%
mutate(scaled_NumCrustaceanTaxa = NumOfCrustaceanTaxa/29) %>%
mutate(scaled_CrustaceanAbun = CrustaceanAbun/1693) %>%
mutate(scaled_NumTaxa = replace_na(scaled_NumTaxa, 0), scaled_NumMolluscTaxa = replace_na(scaled_NumMolluscTaxa, 0), scaled_NumCrustaceanTaxa = replace_na(scaled_NumCrustaceanTaxa, 0), scaled_CrustaceanAbun = replace_na(scaled_CrustaceanAbun, 0)) %>%
# TWV = Taxa Richness Weighted Value
mutate(TWV = scaled_NumTaxa + scaled_NumMolluscTaxa + scaled_NumCrustaceanTaxa + (0.25 * scaled_CrustaceanAbun)) %>%
# NIT = Negative Indicator Taxa
mutate(NIT =
case_when(
!is.na(CapitellaAbun) & !is.na(OligochaetaAbun) ~ -0.2,
!is.na(CapitellaAbun) | !is.na(OligochaetaAbun) ~ -0.1,
is.na(CapitellaAbun) & is.na(OligochaetaAbun) ~ 0
)) %>%
mutate(M_insidiosumAbun = replace_na(M_insidiosumAbun, 0), A_diegensisAbun = replace_na(A_diegensisAbun, 0), G_littoreaAbun = replace_na(G_littoreaAbun, 0)) %>%
# PIT = Positive Indicator Taxa
mutate(PIT = ( (M_insidiosumAbun)^(1/4) / (473)^(1/4) ) + ( (A_diegensisAbun)^(1/4) / (27)^(1/4) ) + ( (G_littoreaAbun)^(1/4) / (15)^(1/4) )) %>%
mutate(Raw_RBI = TWV + NIT + (2 * PIT)) %>%
dplyr::mutate(Score = (Raw_RBI - 0.03)/ 4.69) %>%
# RBI Categories based on RBI scores
dplyr::mutate(Category = case_when( (Score > 0.27) ~ "Reference",
(Score > 0.16 & Score <= 0.27) ~ "Low Disturbance",
(Score > 0.08 & Score <= 0.16) ~ "Moderate Disturbance",
(Score <= 0.08)  ~ "High Disturbance" )) %>%
# RBI Category Scores based on RBI scores
dplyr::mutate(Category_Score = case_when( (Category == "Reference") ~ 1,
(Category == "Low Disturbance") ~ 2,
(Category == "Moderate Disturbance") ~ 3,
(Category == "High Disturbance") ~ 4)) %>%
dplyr::mutate(Index = "RBI")
View(rbi.scores)
source('P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/R/RBI.R', echo=TRUE)
test = test %>% full_join(rbi.scores)
View(test)
source('P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/R/IBI.R', echo=TRUE)
ibi.scores <- IBI(DB)
test = test %>% full_join(ibi.scores)
View(test)
View(ibi.scores)
# Prepare the given data frame so that we can compute the RBI score and categories
ibi_data <- DB %>%
inner_join(Taxonomic_Info, by = c('Species' = 'Taxon')) %>%
dplyr::mutate_if(is.numeric, list(~na_if(., -88))) %>%
dplyr::add_count(Species) %>%
dplyr::select('StationID','Replicate','Species','Abundance','Stratum', 'Phylum', 'Subphylum', 'IBI.Sensitive.Taxa', 'n') %>%
dplyr::group_by(Stratum, StationID, Replicate, Species, Abundance, Phylum, Subphylum) %>%
dplyr::rename(NumOfTaxa = n) %>%
dplyr::rename(B13_Stratum = Stratum)
### SQO IBI - 1
# columns needed in RBI: B13_Stratum, StationID, Replicate, Phylum, NumofTaxa
ibi1 <- ibi_data %>%
group_by(B13_Stratum, StationID, Replicate) %>%
summarise(NumOfTaxa = sum(NumOfTaxa))
### SQO IBI - 2
ibi2 <- ibi_data %>%
dplyr::filter(Phylum == "MOLLUSCA") %>%
dplyr::group_by(B13_Stratum, StationID, Replicate, Phylum, NumOfTaxa) %>%
dplyr::select(B13_Stratum, StationID, Replicate, Phylum, NumOfTaxa) %>%
dplyr::group_by(B13_Stratum, StationID, Replicate, Phylum) %>%
dplyr::summarise(NumOfMolluscTaxa = sum(NumOfTaxa))
### SQO RBI - 3 - 1
ibi3_1 <- ibi_data %>%
dplyr::filter(grepl("Notomastus", Species)) %>%
dplyr::group_by(B13_Stratum, StationID, Replicate, Species, Abundance) %>%
dplyr::select(B13_Stratum, StationID, Replicate, Species, Abundance)
### SQO IBI - 3 - 2
ibi3_2 <- ibi3_1 %>%
dplyr::group_by(B13_Stratum, StationID, Replicate) %>%
dplyr::summarise(NotomastusAbun = sum(Abundance))
### SQO IBI - 4 - 1
ibi4_1 <- ibi_data %>%
dplyr::filter(IBI.Sensitive.Taxa == "TRUE") %>%
dplyr::group_by(B13_Stratum, StationID, Replicate, IBI.Sensitive.Taxa, Abundance) %>%
dplyr::add_count(Abundance) %>%
dplyr::rename(SensTaxa = n) %>%
dplyr::group_by(B13_Stratum, StationID, Replicate, IBI.Sensitive.Taxa) %>%
dplyr::summarise(SensTaxa = sum(SensTaxa))
### SQO IBI - 4 - 2
ibi4_2 <- ibi1 %>%
dplyr::inner_join(ibi4_1, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::mutate(PctSensTaxa = (SensTaxa/NumOfTaxa)*100) %>%
dplyr::select(B13_Stratum, StationID, Replicate, PctSensTaxa)
### Reference ranges for IBI metrics in Southern California Marine Bays
### [ Table 5.4 (p. 77, Technical Manual, 2014) ]
ibi_ref_ranges_table <- data.frame(ref_low = c(13, 2, 0, 19),
ref_high = c(99, 25, 59, 47.1))
row.names(ibi_ref_ranges_table) <- c("NumOfTaxa", "NumOfMolluscTaxa", "NotomastusAbun", "PctSensTaxa")
### IBI category response ranges for Southern California Marine Bays
### [ Table 5.5 (p. 77, Technical Manual, 2014) ]
ibi_category_response_table <- data.frame(ibi_score = as.factor(c(0, 1, 2, 3, 4)),
category = as.factor(c("Reference",
"Low Disturbance",
"Moderate Disturbance",
"High Disturbance",
"High Disturbance")),
category_score = as.factor(c(1, 2, 3, 4, 4)))
### B13 IBI Metrics:
# We stitch together all the necessary IBI metrics to determine the IBI index.
# Each of the metrics is then compared to the tables listed above (Table 5.4 and Table 5.5) to determine the IBI score,
# the IBI Category, and IBI Category Score
ibi_metrics <- ibi1 %>%
dplyr::full_join(ibi2, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::full_join(ibi3_1, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::full_join(ibi3_2, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::full_join(ibi4_1, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::full_join(ibi4_2, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::select(B13_Stratum, StationID, Replicate, NumOfTaxa, NumOfMolluscTaxa, NotomastusAbun, PctSensTaxa) %>%
# We replace any NAs with 0 so that we can compare the values to the tables listed above
dplyr::mutate(NotomastusAbun = replace_na(NotomastusAbun, 0)) %>%
# The IBI score is set to zero before comparison the reference range.
dplyr::mutate(Score = 0) %>%
# For each metric that is out of the reference range (above or below), the IBI score goes up by one.
dplyr::mutate(Score = if_else((NumOfTaxa < ibi_ref_ranges_table["NumOfTaxa",]$ref_low  | NumOfTaxa > ibi_ref_ranges_table["NumOfTaxa",]$ref_high),
Score + 1, Score)) %>%
dplyr::mutate(Score = if_else((NumOfMolluscTaxa < ibi_ref_ranges_table["NumOfMolluscTaxa",]$ref_low  | NumOfMolluscTaxa > ibi_ref_ranges_table["NumOfMolluscTaxa",]$ref_high),
Score + 1, Score)) %>%
dplyr::mutate(Score = if_else((NotomastusAbun < ibi_ref_ranges_table["NotomastusAbun",]$ref_low  | NotomastusAbun > ibi_ref_ranges_table["NotomastusAbun",]$ref_high),
Score + 1, Score)) %>%
dplyr::mutate(Score = if_else((PctSensTaxa < ibi_ref_ranges_table["PctSensTaxa",]$ref_low  | PctSensTaxa > ibi_ref_ranges_table["PctSensTaxa",]$ref_high),
Score + 1, Score)) %>%
# The IBI score is then compared to condition category response ranges (Table 5.5) to determine the IBI category and category score.
dplyr::mutate(Category = case_when(Score == 0 ~ "Reference", Score == 1 ~ "Low Disturbance", Score == 2 ~ "Moderate Disturbance", (Score == 3 | Score == 4) ~ "High Disturbance")) %>%
dplyr::mutate(Category_Score = case_when(Score == 0 ~ 1, Score == 1 ~ 2, Score == 2 ~ 3, (Score == 3 | Score == 4) ~ 4)) %>%
dplyr::mutate(Index = "IBI")
View(ibi_metrics)
### B13 IBI Metrics:
# We stitch together all the necessary IBI metrics to determine the IBI index.
# Each of the metrics is then compared to the tables listed above (Table 5.4 and Table 5.5) to determine the IBI score,
# the IBI Category, and IBI Category Score
ibi_metrics <- ibi1
### B13 IBI Metrics:
# We stitch together all the necessary IBI metrics to determine the IBI index.
# Each of the metrics is then compared to the tables listed above (Table 5.4 and Table 5.5) to determine the IBI score,
# the IBI Category, and IBI Category Score
ibi_metrics <- ibi1 %>%
dplyr::full_join(ibi2, by = c("B13_Stratum", "StationID", "Replicate"))
View(ibi_metrics)
### B13 IBI Metrics:
# We stitch together all the necessary IBI metrics to determine the IBI index.
# Each of the metrics is then compared to the tables listed above (Table 5.4 and Table 5.5) to determine the IBI score,
# the IBI Category, and IBI Category Score
ibi_metrics <- ibi1 %>%
dplyr::full_join(ibi2, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::full_join(ibi3_1, by = c("B13_Stratum", "StationID", "Replicate")) #%>%
View(ibi_metrics)
### B13 IBI Metrics:
# We stitch together all the necessary IBI metrics to determine the IBI index.
# Each of the metrics is then compared to the tables listed above (Table 5.4 and Table 5.5) to determine the IBI score,
# the IBI Category, and IBI Category Score
ibi_metrics <- ibi1 %>%
dplyr::full_join(ibi2, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::full_join(ibi3_1, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::full_join(ibi3_2, by = c("B13_Stratum", "StationID", "Replicate")) #%>%
View(ibi_metrics)
### B13 IBI Metrics:
# We stitch together all the necessary IBI metrics to determine the IBI index.
# Each of the metrics is then compared to the tables listed above (Table 5.4 and Table 5.5) to determine the IBI score,
# the IBI Category, and IBI Category Score
ibi_metrics <- ibi1 %>%
dplyr::full_join(ibi2, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::full_join(ibi3_1, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::full_join(ibi3_2, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::full_join(ibi4_1, by = c("B13_Stratum", "StationID", "Replicate")) #>%
View(ibi_metrics)
View(Taxonomic_Info)
### SQO IBI - 4 - 1
ibi4_1 <- ibi_data %>%
dplyr::filter(IBI.Sensitive.Taxa != 0) %>%
dplyr::group_by(B13_Stratum, StationID, Replicate, IBI.Sensitive.Taxa, Abundance) %>%
dplyr::add_count(Abundance) %>%
dplyr::rename(SensTaxa = n) %>%
dplyr::group_by(B13_Stratum, StationID, Replicate, IBI.Sensitive.Taxa) %>%
dplyr::summarise(SensTaxa = sum(SensTaxa))
### SQO IBI - 4 - 2
ibi4_2 <- ibi1 %>%
dplyr::inner_join(ibi4_1, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::mutate(PctSensTaxa = (SensTaxa/NumOfTaxa)*100) %>%
dplyr::select(B13_Stratum, StationID, Replicate, PctSensTaxa)
### Reference ranges for IBI metrics in Southern California Marine Bays
### [ Table 5.4 (p. 77, Technical Manual, 2014) ]
ibi_ref_ranges_table <- data.frame(ref_low = c(13, 2, 0, 19),
ref_high = c(99, 25, 59, 47.1))
row.names(ibi_ref_ranges_table) <- c("NumOfTaxa", "NumOfMolluscTaxa", "NotomastusAbun", "PctSensTaxa")
### IBI category response ranges for Southern California Marine Bays
### [ Table 5.5 (p. 77, Technical Manual, 2014) ]
ibi_category_response_table <- data.frame(ibi_score = as.factor(c(0, 1, 2, 3, 4)),
category = as.factor(c("Reference",
"Low Disturbance",
"Moderate Disturbance",
"High Disturbance",
"High Disturbance")),
category_score = as.factor(c(1, 2, 3, 4, 4)))
### B13 IBI Metrics:
# We stitch together all the necessary IBI metrics to determine the IBI index.
# Each of the metrics is then compared to the tables listed above (Table 5.4 and Table 5.5) to determine the IBI score,
# the IBI Category, and IBI Category Score
ibi_metrics <- ibi1 %>%
dplyr::full_join(ibi2, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::full_join(ibi3_1, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::full_join(ibi3_2, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::full_join(ibi4_1, by = c("B13_Stratum", "StationID", "Replicate")) #>%
### B13 IBI Metrics:
# We stitch together all the necessary IBI metrics to determine the IBI index.
# Each of the metrics is then compared to the tables listed above (Table 5.4 and Table 5.5) to determine the IBI score,
# the IBI Category, and IBI Category Score
ibi_metrics <- ibi1 %>%
dplyr::full_join(ibi2, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::full_join(ibi3_1, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::full_join(ibi3_2, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::full_join(ibi4_1, by = c("B13_Stratum", "StationID", "Replicate")) >%
dplyr::full_join(ibi4_2, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::select(B13_Stratum, StationID, Replicate, NumOfTaxa, NumOfMolluscTaxa, NotomastusAbun, PctSensTaxa) %>%
# We replace any NAs with 0 so that we can compare the values to the tables listed above
dplyr::mutate(NotomastusAbun = replace_na(NotomastusAbun, 0)) %>%
# The IBI score is set to zero before comparison the reference range.
dplyr::mutate(Score = 0) %>%
# For each metric that is out of the reference range (above or below), the IBI score goes up by one.
dplyr::mutate(Score = if_else((NumOfTaxa < ibi_ref_ranges_table["NumOfTaxa",]$ref_low  | NumOfTaxa > ibi_ref_ranges_table["NumOfTaxa",]$ref_high),
Score + 1, Score)) %>%
dplyr::mutate(Score = if_else((NumOfMolluscTaxa < ibi_ref_ranges_table["NumOfMolluscTaxa",]$ref_low  | NumOfMolluscTaxa > ibi_ref_ranges_table["NumOfMolluscTaxa",]$ref_high),
Score + 1, Score)) %>%
dplyr::mutate(Score = if_else((NotomastusAbun < ibi_ref_ranges_table["NotomastusAbun",]$ref_low  | NotomastusAbun > ibi_ref_ranges_table["NotomastusAbun",]$ref_high),
Score + 1, Score)) %>%
dplyr::mutate(Score = if_else((PctSensTaxa < ibi_ref_ranges_table["PctSensTaxa",]$ref_low  | PctSensTaxa > ibi_ref_ranges_table["PctSensTaxa",]$ref_high),
Score + 1, Score)) %>%
# The IBI score is then compared to condition category response ranges (Table 5.5) to determine the IBI category and category score.
dplyr::mutate(Category = case_when(Score == 0 ~ "Reference", Score == 1 ~ "Low Disturbance", Score == 2 ~ "Moderate Disturbance", (Score == 3 | Score == 4) ~ "High Disturbance")) %>%
dplyr::mutate(Category_Score = case_when(Score == 0 ~ 1, Score == 1 ~ 2, Score == 2 ~ 3, (Score == 3 | Score == 4) ~ 4)) %>%
dplyr::mutate(Index = "IBI")
### B13 IBI Metrics:
# We stitch together all the necessary IBI metrics to determine the IBI index.
# Each of the metrics is then compared to the tables listed above (Table 5.4 and Table 5.5) to determine the IBI score,
# the IBI Category, and IBI Category Score
ibi_metrics <- ibi1 %>%
dplyr::full_join(ibi2, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::full_join(ibi3_1, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::full_join(ibi3_2, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::full_join(ibi4_1, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::full_join(ibi4_2, by = c("B13_Stratum", "StationID", "Replicate")) %>%
dplyr::select(B13_Stratum, StationID, Replicate, NumOfTaxa, NumOfMolluscTaxa, NotomastusAbun, PctSensTaxa) %>%
# We replace any NAs with 0 so that we can compare the values to the tables listed above
dplyr::mutate(NotomastusAbun = replace_na(NotomastusAbun, 0)) %>%
# The IBI score is set to zero before comparison the reference range.
dplyr::mutate(Score = 0) %>%
# For each metric that is out of the reference range (above or below), the IBI score goes up by one.
dplyr::mutate(Score = if_else((NumOfTaxa < ibi_ref_ranges_table["NumOfTaxa",]$ref_low  | NumOfTaxa > ibi_ref_ranges_table["NumOfTaxa",]$ref_high),
Score + 1, Score)) %>%
dplyr::mutate(Score = if_else((NumOfMolluscTaxa < ibi_ref_ranges_table["NumOfMolluscTaxa",]$ref_low  | NumOfMolluscTaxa > ibi_ref_ranges_table["NumOfMolluscTaxa",]$ref_high),
Score + 1, Score)) %>%
dplyr::mutate(Score = if_else((NotomastusAbun < ibi_ref_ranges_table["NotomastusAbun",]$ref_low  | NotomastusAbun > ibi_ref_ranges_table["NotomastusAbun",]$ref_high),
Score + 1, Score)) %>%
dplyr::mutate(Score = if_else((PctSensTaxa < ibi_ref_ranges_table["PctSensTaxa",]$ref_low  | PctSensTaxa > ibi_ref_ranges_table["PctSensTaxa",]$ref_high),
Score + 1, Score)) %>%
# The IBI score is then compared to condition category response ranges (Table 5.5) to determine the IBI category and category score.
dplyr::mutate(Category = case_when(Score == 0 ~ "Reference", Score == 1 ~ "Low Disturbance", Score == 2 ~ "Moderate Disturbance", (Score == 3 | Score == 4) ~ "High Disturbance")) %>%
dplyr::mutate(Category_Score = case_when(Score == 0 ~ 1, Score == 1 ~ 2, Score == 2 ~ 3, (Score == 3 | Score == 4) ~ 4)) %>%
dplyr::mutate(Index = "IBI")
View(ibi_metrics)
mambi.score <- MAMBI(DB, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid")
rbi.scores <- RBI(DB)
ibi.scores <- IBI(DB)
bri.scores <- BRI(DB)
final.scores <- mambi.score %>%
dplyr::full_join(rbi.scores, by = c("StationID", "Replicate")) %>%
dplyr::full_join(ibi.scores, by = c("StationID", "Replicate")) %>%
dplyr::full_join(bri.scores, by = c("StationID", "Replicate")) # will add other scores to this data frame as they are computed
View(final.scores)
View(ibi_metrics)
final.scores <- mambi.score %>%
dplyr::full_join(rbi.scores, by = c("StationID", "Replicate")) %>%
dplyr::full_join(ibi.scores, by = c("StationID", "Replicate")) %>%
dplyr::full_join(bri.scores, by = c("StationID", "Replicate")) # will add other scores to this data frame as they are computed
View(final.scores)
final.scores = mambi.score
final.scores = final.scores %>% full_join(rbi.scores, by = c("StationID", "Replicate"))
View(final.scores)
final.scores = final.scores %>% full_join(rbi.scores)
View(final.scores)
source('P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/R/MAMBI.R', echo=TRUE)
source('P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/R/IBI.R', echo=TRUE)
mambi.score <- MAMBI(DB, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid")
rbi.scores <- RBI(DB)
ibi.scores <- IBI(DB)
bri.scores <- BRI(DB)
final.scores <- mambi.score %>%
dplyr::full_join(rbi.scores, by = c("StationID", "Replicate")) %>%
dplyr::full_join(ibi.scores, by = c("StationID", "Replicate")) %>%
dplyr::full_join(bri.scores, by = c("StationID", "Replicate")) # will add other scores to this data frame as they are computed
View(final.scores)
View(bri.scores)
View(bri.scores)
final.scores <- mambi.score %>%
dplyr::full_join(rbi.scores, by = c("StationID", "Replicate")) %>%
dplyr::full_join(ibi.scores, by = c("StationID", "Replicate")) %>%
dplyr::full_join(bri.scores, by = c("StationID", "Replicate")) # will add other scores to this data frame as they are computed
View(final.scores)
final.scores <- final.scores %>% full_join(bri.scores)
View(final.scores)
source('P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/R/BRI.R', echo=TRUE)
mambi.score <- MAMBI(DB, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid")
rbi.scores <- RBI(DB)
ibi.scores <- IBI(DB)
bri.scores <- BRI(DB)
final.scores <- mambi.score %>%
dplyr::full_join(rbi.scores, by = c("StationID", "Replicate")) %>%
dplyr::full_join(ibi.scores, by = c("StationID", "Replicate")) %>%
dplyr::full_join(bri.scores, by = c("StationID", "Replicate")) # will add other scores to this data frame as they are computed
View(final.scores)
source('P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/R/BRI.R', echo=TRUE)
bri.scores <- BRI(DB)
final.scores <- mambi.score %>%
dplyr::full_join(rbi.scores, by = c("StationID", "Replicate")) %>%
dplyr::full_join(ibi.scores, by = c("StationID", "Replicate")) %>%
dplyr::full_join(bri.scores, by = c("StationID", "Replicate")) # will add other scores to this data frame as they are computed
View(final.scores)
final.scores <- mambi.score %>%
dplyr::full_join(bri.scores, by = c("StationID", "Replicate")) %>%
dplyr::full_join(rbi.scores, by = c("StationID", "Replicate")) %>%
dplyr::full_join(ibi.scores, by = c("StationID", "Replicate")) # will add other scores to this data frame as they are computed
View(final.scores)
final.scores = mambi.score %>% full_join(bri.scores)
View(final.scores)
final.scores <- mambi.score %>%
dplyr::full_join(bri.scores) %>%
dplyr::full_join(rbi.scores) %>%
dplyr::full_join(ibi.scores) # will add other scores to this data frame as they are computed
View(final.scores)
final.scores <- mambi.score %>%
dplyr::full_join(bri.scores) %>%
dplyr::full_join(rbi.scores) %>%
dplyr::full_join(ibi.scores) %>% # will add other scores to this data frame as they are computed
dplyr::select("StationID", "Replicate", "SampleDate", "B13_Stratum", "Index", "Score",
"Category", "Score_Category", "MAMBI_Score", "New_MAMBI_Condition",
"Use_AMBI", "Use_MAMBI", "YesEG")
final.scores <- mambi.score %>%
dplyr::full_join(bri.scores) %>%
dplyr::full_join(rbi.scores) %>%
dplyr::full_join(ibi.scores) %>% # will add other scores to this data frame as they are computed
dplyr::select("StationID", "Replicate", "SampleDate", "B13_Stratum", "Index", "Score",
"Category", "Category_Score", "MAMBI_Score", "New_MAMBI_Condition",
"Use_AMBI", "Use_MAMBI", "YesEG")
View(final.scores)
final.scores <- data.frame(matrix(vector(), 0, 3),
dimnames = list(c(), c("Date", "File", "User")),
stringsAsFactors = F)
source('P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/R/SQOUnified.R', echo=TRUE)
final.scores <- data.frame(matrix(vector(), 0, 3),
dimnames = list(c(), c("Date", "File", "User")),
stringsAsFactors = F)
load("P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/data/benthic_data.Rdata")
View(benthic_data)
source('P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/R/benthic_query.R')
test = benthic_query()
View(test)
temp = test %>% dplyr::select(StationID = c(B18-10015, B18-10016, B18-10017, B18-10019, B18-10020, B18-10022, B18-10023, B18-10024, B18-10029, B18-10030, B18-10031, B18-10032, B18-10034, B18-10035, B18-10036, B18-10037, B18-10038, B18-10039, B18-10040, B18-10041, B18-10042, B18-10043, B18-10044, B18-10065, B18-10066, B18-10067, B18-10068, B18-10069, B18-10070, B18-10071, B18-10072, B18-10073, B18-10074, B18-10075, B18-10076, B18-10077, B18-10078, B18-10079, B18-10080, B18-10081, B18-10082, B18-10083, B18-10084, B18-10085, B18-10086, B18-10087, B18-10088, B18-10112, B18-10113, B18-10114, B18-10115, B18-10116, B18-10117, B18-10119, B18-10121, B18-10123, B18-10124, B18-10126, B18-10127, B18-10132, B18-10133, B18-10136, B18-10137, B18-10139, B18-10140, B18-10141, B18-10142, B18-10143, B18-10144, B18-10178, B18-10179, B18-10180, B18-10181, B18-10200, B18-10438))
temp = test %>% dplyr::select("StationID" = c("B18-10015", "B18-10016"))
temp = test %>% dplyr::select("StationID" == c("B18-10015", "B18-10016"))
temp = test %>% dplyr::filter(StationID = c(B18-10015, B18-10016, B18-10017, B18-10019, B18-10020, B18-10022, B18-10023, B18-10024, B18-10029, B18-10030, B18-10031, B18-10032, B18-10034, B18-10035, B18-10036, B18-10037, B18-10038, B18-10039, B18-10040, B18-10041, B18-10042, B18-10043, B18-10044, B18-10065, B18-10066, B18-10067, B18-10068, B18-10069, B18-10070, B18-10071, B18-10072, B18-10073, B18-10074, B18-10075, B18-10076, B18-10077, B18-10078, B18-10079, B18-10080, B18-10081, B18-10082, B18-10083, B18-10084, B18-10085, B18-10086, B18-10087, B18-10088, B18-10112, B18-10113, B18-10114, B18-10115, B18-10116, B18-10117, B18-10119, B18-10121, B18-10123, B18-10124, B18-10126, B18-10127, B18-10132, B18-10133, B18-10136, B18-10137, B18-10139, B18-10140, B18-10141, B18-10142, B18-10143, B18-10144, B18-10178, B18-10179, B18-10180, B18-10181, B18-10200, B18-10438))
temp = test %>% dplyr::filter(StationID == c(B18-10015, B18-10016, B18-10017, B18-10019, B18-10020, B18-10022, B18-10023, B18-10024, B18-10029, B18-10030, B18-10031, B18-10032, B18-10034, B18-10035, B18-10036, B18-10037, B18-10038, B18-10039, B18-10040, B18-10041, B18-10042, B18-10043, B18-10044, B18-10065, B18-10066, B18-10067, B18-10068, B18-10069, B18-10070, B18-10071, B18-10072, B18-10073, B18-10074, B18-10075, B18-10076, B18-10077, B18-10078, B18-10079, B18-10080, B18-10081, B18-10082, B18-10083, B18-10084, B18-10085, B18-10086, B18-10087, B18-10088, B18-10112, B18-10113, B18-10114, B18-10115, B18-10116, B18-10117, B18-10119, B18-10121, B18-10123, B18-10124, B18-10126, B18-10127, B18-10132, B18-10133, B18-10136, B18-10137, B18-10139, B18-10140, B18-10141, B18-10142, B18-10143, B18-10144, B18-10178, B18-10179, B18-10180, B18-10181, B18-10200, B18-10438))
temp = test %>% dplyr::filter(StationID == c("B18-10015", "B18-10016"))
View(temp)
temp = test %>% dplyr::filter(StationID == c('B18-10015', 'B18-10016', 'B18-10017', 'B18-10019', 'B18-10020', 'B18-10022', 'B18-10023', 'B18-10024', 'B18-10029', 'B18-10030', 'B18-10031', 'B18-10032', 'B18-10034', 'B18-10035', 'B18-10036', 'B18-10037', 'B18-10038', 'B18-10039', 'B18-10040', 'B18-10041', 'B18-10042', 'B18-10043', 'B18-10044', 'B18-10065', 'B18-10066', 'B18-10067', 'B18-10068', 'B18-10069', 'B18-10070', 'B18-10071', 'B18-10072', 'B18-10073', 'B18-10074', 'B18-10075', 'B18-10076', 'B18-10077, 'B18-10078, 'B18-10079', 'B18-10080', 'B18-10081', 'B18-10082', 'B18-10083', 'B18-10084', 'B18-10085', 'B18-10086', 'B18-10087', 'B18-10088', 'B18-10112', 'B18-10113', 'B18-10114', 'B18-10115', 'B18-10116', 'B18-10117', 'B18-10119', 'B18-10121', 'B18-10123', 'B18-10124', 'B18-10126', 'B18-10127', 'B18-10132', 'B18-10133', 'B18-10136', 'B18-10137', 'B18-10139', 'B18-10140', 'B18-10141', 'B18-10142', 'B18-10143', 'B18-10144', 'B18-10178', 'B18-10179', 'B18-10180', 'B18-10181', 'B18-10200', 'B18-10438'))
temp = test %>% dplyr::filter(StationID == c('B18-10015', 'B18-10016', 'B18-10017', 'B18-10019', 'B18-10020', 'B18-10022', 'B18-10023', 'B18-10024', 'B18-10029', 'B18-10030', 'B18-10031', 'B18-10032', 'B18-10034', 'B18-10035', 'B18-10036', 'B18-10037', 'B18-100398', 'B18-10039', 'B18-10040', 'B18-10041', 'B18-10042', 'B18-10043', 'B18-10044', 'B18-10065', 'B18-10066', 'B18-10067', 'B18-10068', 'B18-10069', 'B18-10070', 'B18-10071', 'B18-10072', 'B18-10073', 'B18-10074', 'B18-10075', 'B18-10076', 'B18-10077, 'B18-10078, 'B18-10079', 'B18-10080', 'B18-10081', 'B18-10082', 'B18-10083', 'B18-10084', 'B18-10085', 'B18-10086', 'B18-10087', 'B18-10088', 'B18-10112', 'B18-10113', 'B18-10114', 'B18-10115', 'B18-10116', 'B18-10117', 'B18-10119', 'B18-10121', 'B18-10123', 'B18-10124', 'B18-10126', 'B18-10127', 'B18-10132', 'B18-10133', 'B18-10136', 'B18-10137', 'B18-10139', 'B18-10140', 'B18-10141', 'B18-10142', 'B18-10143', 'B18-10144', 'B18-10178', 'B18-10179', 'B18-10180', 'B18-10181', 'B18-10200', 'B18-10438'))
temp = test %>% dplyr::filter(StationID == c('B18-10015', 'B18-10016', 'B18-10017', 'B18-10019', 'B18-10020', 'B18-10022', 'B18-10023', 'B18-10024', 'B18-10029', 'B18-10030', 'B18-10031', 'B18-10032', 'B18-10034', 'B18-10035', 'B18-10036', 'B18-10037', 'B18-10038', 'B18-10039', 'B18-10040', 'B18-10041', 'B18-10042', 'B18-10043', 'B18-10044', 'B18-10065', 'B18-10066', 'B18-10067', 'B18-10068', 'B18-10069', 'B18-10070', 'B18-10071', 'B18-10072', 'B18-10073', 'B18-10074', 'B18-10075', 'B18-10076', 'B18-10077, 'B18-10078, 'B18-10079', 'B18-10080', 'B18-10081', 'B18-10082', 'B18-10083', 'B18-10084', 'B18-10085', 'B18-10086', 'B18-10087', 'B18-10088', 'B18-10112', 'B18-10113', 'B18-10114', 'B18-10115', 'B18-10116', 'B18-10117', 'B18-10119', 'B18-10121', 'B18-10123', 'B18-10124', 'B18-10126', 'B18-10127', 'B18-10132', 'B18-10133', 'B18-10136', 'B18-10137', 'B18-10139', 'B18-10140', 'B18-10141', 'B18-10142', 'B18-10143', 'B18-10144', 'B18-10178', 'B18-10179', 'B18-10180', 'B18-10181', 'B18-10200', 'B18-10438'))
temp = test %>% dplyr::filter(StationID == c('B18-10015', 'B18-10016', 'B18-10017', 'B18-10019', 'B18-10020', 'B18-10022', 'B18-10023', 'B18-10024', 'B18-10029', 'B18-10030', 'B18-10031', 'B18-10032', 'B18-10034', 'B18-10035', 'B18-10036', 'B18-10037', 'B18-10038', 'B18-10039', 'B18-10040', 'B18-10041', 'B18-10042', 'B18-10043', 'B18-10044', 'B18-10065', 'B18-10066', 'B18-10067', 'B18-10068', 'B18-10069', 'B18-10070', 'B18-10071', 'B18-10072', 'B18-10073', 'B18-10074', 'B18-10075', 'B18-10076', 'B18-10077, 'B18-10078, 'B18-10079', 'B18-10080', 'B18-10081', 'B18-10082', 'B18-10083', 'B18-10084', 'B18-10085', 'B18-10086', 'B18-10087', 'B18-10088', 'B18-10112', 'B18-10113', 'B18-10114', 'B18-10115', 'B18-10116', 'B18-10117', 'B18-10119', 'B18-10121', 'B18-10123', 'B18-10124', 'B18-10126', 'B18-10127', 'B18-10132', 'B18-10133', 'B18-10136', 'B18-10137', 'B18-10139', 'B18-10140', 'B18-10141', 'B18-10142', 'B18-10143', 'B18-10144', 'B18-10178', 'B18-10179', 'B18-10180', 'B18-10181', 'B18-10200', 'B18-10438'))
temp = test %>% dplyr::filter(StationID == c('B18-10015', 'B18-10016', 'B18-10017', 'B18-10019', 'B18-10020', 'B18-10022', 'B18-10023', 'B18-10024', 'B18-10029', 'B18-10030', 'B18-10031', 'B18-10032', 'B18-10034', 'B18-10035', 'B18-10036', 'B18-10037', 'B18-10038', 'B18-10039', 'B18-10040', 'B18-10041', 'B18-10042', 'B18-10043', 'B18-10044', 'B18-10065', 'B18-10066', 'B18-10067', 'B18-10068', 'B18-10069', 'B18-10070', 'B18-10071', 'B18-10072', 'B18-10073', 'B18-10074', 'B18-10075', 'B18-10076', 'B18-10077, 'B18-10078, 'B18-10079', 'B18-10080', 'B18-10081', 'B18-10082', 'B18-10083', 'B18-10084', 'B18-10085', 'B18-10086', 'B18-10087', 'B18-10088', 'B18-10112', 'B18-10113', 'B18-10114', 'B18-10115', 'B18-10116', 'B18-10117', 'B18-10119', 'B18-10121', 'B18-10123', 'B18-10124', 'B18-10126', 'B18-10127', 'B18-10132', 'B18-10133', 'B18-10136', 'B18-10137', 'B18-10139', 'B18-10140', 'B18-10141', 'B18-10142', 'B18-10143', 'B18-10144', 'B18-10178', 'B18-10179', 'B18-10180', 'B18-10181', 'B18-10200', 'B18-10438'))
temp = test %>% dplyr::filter(StationID == c('B18-10015', 'B18-10016', 'B18-10017', 'B18-10019', 'B18-10020', 'B18-10022', 'B18-10023', 'B18-10024', 'B18-10029', 'B18-10030', 'B18-10031', 'B18-10032', 'B18-10034', 'B18-10035', 'B18-10036', 'B18-10037', 'B18-10038'))
temp = test %>% dplyr::filter(StationID == c('B18-10015', 'B18-10016', 'B18-10017', 'B18-10019', 'B18-10020', 'B18-10022', 'B18-10023', 'B18-10024', 'B18-10029', 'B18-10030', 'B18-10031', 'B18-10032', 'B18-10034', 'B18-10035', 'B18-10036', 'B18-10037', 'B18-10038', 'B18-10039'))
temp = test %>% dplyr::filter(StationID == c('B18-10015', 'B18-10016', 'B18-10017', 'B18-10019', 'B18-10020', 'B18-10022', 'B18-10023', 'B18-10024', 'B18-10029', 'B18-10030', 'B18-10031', 'B18-10032', 'B18-10034', 'B18-10035', 'B18-10036', 'B18-10037', 'B18-10038', 'B18-10039', 'B18-10040', 'B18-10041', 'B18-10042', 'B18-10043', 'B18-10044', 'B18-10065', 'B18-10066', 'B18-10067', 'B18-10068', 'B18-10069', 'B18-10070', 'B18-10071', 'B18-10072', 'B18-10073', 'B18-10074', 'B18-10075', 'B18-10076', 'B18-10077, 'B18-10078, 'B18-10079', 'B18-10080', 'B18-10081', 'B18-10082', 'B18-10083', 'B18-10084', 'B18-10085', 'B18-10086', 'B18-10087', 'B18-10088', 'B18-10112', 'B18-10113', 'B18-10114', 'B18-10115', 'B18-10116', 'B18-10117', 'B18-10119', 'B18-10121', 'B18-10123', 'B18-10124', 'B18-10126', 'B18-10127', 'B18-10132', 'B18-10133', 'B18-10136', 'B18-10137', 'B18-10139', 'B18-10140', 'B18-10141', 'B18-10142', 'B18-10143', 'B18-10144', 'B18-10178', 'B18-10179', 'B18-10180', 'B18-10181', 'B18-10200', 'B18-10438'))
stationsOfInterest = c('B18-10015', 'B18-10016', 'B18-10017', 'B18-10019', 'B18-10020', 'B18-10022', 'B18-10023', 'B18-10024', 'B18-10029', 'B18-10030', 'B18-10031', 'B18-10032', 'B18-10034', 'B18-10035', 'B18-10036', 'B18-10037', 'B18-10038', 'B18-10039', 'B18-10040', 'B18-10041', 'B18-10042', 'B18-10043', 'B18-10044', 'B18-10065', 'B18-10066', 'B18-10067', 'B18-10068', 'B18-10069', 'B18-10070', 'B18-10071', 'B18-10072', 'B18-10073', 'B18-10074', 'B18-10075', 'B18-10076', 'B18-10077, 'B18-10078, 'B18-10079', 'B18-10080', 'B18-10081', 'B18-10082', 'B18-10083', 'B18-10084', 'B18-10085', 'B18-10086', 'B18-10087', 'B18-10088', 'B18-10112', 'B18-10113', 'B18-10114', 'B18-10115', 'B18-10116', 'B18-10117', 'B18-10119', 'B18-10121', 'B18-10123', 'B18-10124', 'B18-10126', 'B18-10127', 'B18-10132', 'B18-10133', 'B18-10136', 'B18-10137', 'B18-10139', 'B18-10140', 'B18-10141', 'B18-10142', 'B18-10143', 'B18-10144', 'B18-10178', 'B18-10179', 'B18-10180', 'B18-10181', 'B18-10200', 'B18-10438')
stationsOfInterest = c('B18-10015', 'B18-10016', 'B18-10017', 'B18-10019', 'B18-10020', 'B18-10022', 'B18-10023', 'B18-10024', 'B18-10029', 'B18-10030', 'B18-10031', 'B18-10032', 'B18-10034', 'B18-10035', 'B18-10036', 'B18-10037', 'B18-10038', 'B18-10039', 'B18-10040', 'B18-10041', 'B18-10042', 'B18-10043', 'B18-10044', 'B18-10065', 'B18-10066', 'B18-10067', 'B18-10068', 'B18-10069', 'B18-10070', 'B18-10071', 'B18-10072', 'B18-10073', 'B18-10074', 'B18-10075', 'B18-10076', 'B18-10077, 'B18-10078, 'B18-10079', 'B18-10080', 'B18-10081', 'B18-10082', 'B18-10083', 'B18-10084', 'B18-10085', 'B18-10086', 'B18-10087', 'B18-10088', 'B18-10112', 'B18-10113', 'B18-10114', 'B18-10115', 'B18-10116', 'B18-10117', 'B18-10119', 'B18-10121', 'B18-10123', 'B18-10124', 'B18-10126', 'B18-10127', 'B18-10132', 'B18-10133', 'B18-10136', 'B18-10137', 'B18-10139', 'B18-10140', 'B18-10141', 'B18-10142', 'B18-10143', 'B18-10144', 'B18-10178', 'B18-10179', 'B18-10180', 'B18-10181', 'B18-10200', 'B18-10438')
stationsOfInterest = c('B18-10015', 'B18-10016', 'B18-10017', 'B18-10019', 'B18-10020', 'B18-10022', 'B18-10023', 'B18-10024', 'B18-10029', 'B18-10030', 'B18-10031', 'B18-10032', 'B18-10034', 'B18-10035', 'B18-10036', 'B18-10037', 'B18-10038')
stationsOfInterest = c('B18-10015', 'B18-10016', 'B18-10017', 'B18-10019', 'B18-10020', 'B18-10022', 'B18-10023', 'B18-10024', 'B18-10029', 'B18-10030', 'B18-10031', 'B18-10032', 'B18-10034', 'B18-10035', 'B18-10036', 'B18-10037', 'B18-10038', 'B18-10039')
stationsOfInterest = c('B18-10015', 'B18-10016', 'B18-10017', 'B18-10019', 'B18-10020', 'B18-10022', 'B18-10023', 'B18-10024', 'B18-10029', 'B18-10030', 'B18-10031', 'B18-10032', 'B18-10034', 'B18-10035', 'B18-10036', 'B18-10037', 'B18-10038', 'B18-10039', 'B18-10040')
stationsOfInterest = c('B18-10015', 'B18-10016', 'B18-10017', 'B18-10019', 'B18-10020', 'B18-10022', 'B18-10023', 'B18-10024', 'B18-10029', 'B18-10030', 'B18-10031', 'B18-10032', 'B18-10034', 'B18-10035', 'B18-10036', 'B18-10037', 'B18-10038', 'B18-10039', 'B18-10040', 'B18-10041', 'B18-10042', 'B18-10043', 'B18-10044', 'B18-10065', 'B18-10066', 'B18-10067', 'B18-10068', 'B18-10069', 'B18-10070', 'B18-10071', 'B18-10072', 'B18-10073', 'B18-10074', 'B18-10075', 'B18-10076', 'B18-10077, 'B18-10078, 'B18-10079', 'B18-10080', 'B18-10081', 'B18-10082', 'B18-10083', 'B18-10084', 'B18-10085', 'B18-10086', 'B18-10087', 'B18-10088', 'B18-10112', 'B18-10113', 'B18-10114', 'B18-10115', 'B18-10116', 'B18-10117', 'B18-10119', 'B18-10121', 'B18-10123', 'B18-10124', 'B18-10126', 'B18-10127', 'B18-10132', 'B18-10133', 'B18-10136', 'B18-10137', 'B18-10139', 'B18-10140', 'B18-10141', 'B18-10142', 'B18-10143', 'B18-10144', 'B18-10178', 'B18-10179', 'B18-10180', 'B18-10181', 'B18-10200', 'B18-10438')
stationsOfInterest = c('B18-10015', 'B18-10016', 'B18-10017', 'B18-10019', 'B18-10020', 'B18-10022', 'B18-10023', 'B18-10024', 'B18-10029', 'B18-10030', 'B18-10031', 'B18-10032', 'B18-10034', 'B18-10035', 'B18-10036', 'B18-10037', 'B18-10038', 'B18-10039', 'B18-10040', 'B18-10041', 'B18-10042', 'B18-10043', 'B18-10044', 'B18-10065', 'B18-10066', 'B18-10067', 'B18-10068', 'B18-10069', 'B18-10070', 'B18-10071', 'B18-10072', 'B18-10073', 'B18-10074', 'B18-10075', 'B18-10076', 'B18-10077, 'B18-10078, 'B18-10079', 'B18-10080', 'B18-10081', 'B18-10082', 'B18-10083', 'B18-10084', 'B18-10085', 'B18-10086', 'B18-10087', 'B18-10088', 'B18-10112', 'B18-10113', 'B18-10114', 'B18-10115', 'B18-10116', 'B18-10117', 'B18-10119', 'B18-10121', 'B18-10123', 'B18-10124', 'B18-10126', 'B18-10127', 'B18-10132', 'B18-10133', 'B18-10136', 'B18-10137', 'B18-10139', 'B18-10140', 'B18-10141', 'B18-10142', 'B18-10143', 'B18-10144', 'B18-10178', 'B18-10179', 'B18-10180', 'B18-10181', 'B18-10200', 'B18-10438')
stationsOfInterest = c('B18-10015', 'B18-10016', 'B18-10017', 'B18-10019', 'B18-10020', 'B18-10022', 'B18-10023', 'B18-10024', 'B18-10029', 'B18-10030', 'B18-10031', 'B18-10032', 'B18-10034', 'B18-10035', 'B18-10036', 'B18-10037', 'B18-10038', 'B18-10039', 'B18-10040', 'B18-10041', 'B18-10042', 'B18-10043', 'B18-10044', 'B18-10065', 'B18-10066', 'B18-10067', 'B18-10068', 'B18-10069', 'B18-10070', 'B18-10071', 'B18-10072', 'B18-10073', 'B18-10074', 'B18-10075', 'B18-10076', 'B18-10077, 'B18-10078, 'B18-10079', 'B18-10080', 'B18-10081', 'B18-10082', 'B18-10083', 'B18-10084', 'B18-10085', 'B18-10086', 'B18-10087', 'B18-10088', 'B18-10112', 'B18-10113', 'B18-10114', 'B18-10115', 'B18-10116', 'B18-10117', 'B18-10119', 'B18-10121', 'B18-10123', 'B18-10124', 'B18-10126', 'B18-10127', 'B18-10132', 'B18-10133', 'B18-10136', 'B18-10137', 'B18-10139', 'B18-10140', 'B18-10141', 'B18-10142', 'B18-10143', 'B18-10144', 'B18-10178', 'B18-10179', 'B18-10180', 'B18-10181', 'B18-10200', 'B18-10438')
x = c('B18-10015', 'B18-10016', 'B18-10017', 'B18-10019', 'B18-10020', 'B18-10022', 'B18-10023', 'B18-10024', 'B18-10029', 'B18-10030')
getwd()
rhmp = read.csv("RHMP.csv")
rhmp = read.csv("RHMP_data.csv")
View(rhmp)
rhmp = read.csv("RHMP_data.csv", header = FALSE)
View(rhmp)
rhmp = read.csv("RHMP_data.csv", header = FALSE)
rhmp[1]
rhmp[1,]
rhmp[1,] = 'B18-10015'
rhmp = read.csv("RHMP_data.csv", encoding="UTF-8-BOM", header = FALSE)
rhmp = read.csv("RHMP_data.csv", encoding="UTF-8-BOM", header = FALSE)
View(rhmp)
rhmp = read.csv("RHMP_data.csv", encoding="UTF-8-BOM", header = FALSE)
View(rhmp)
rhmp = read.csv("RHMP_data.csv", fileEncoding="UTF-8-BOM", header = FALSE)
DB = test %>%
dplyr::filter('StationID' %in% rhmp)
View(DB)
DB = test %>%
dplyr::filter(StationID %in% rhmp)
typeof(test$StationID)
typeof(rhmp)
typeof(rhmp[1,])
t = rhmp[1,]
t
y = test$StationID[1]
y
typeof(y)
typeof(t)
toStrin(t)
toString(t)
t = toString(t)
typeof(t)
rhmp = read.csv("RHMP_data.csv", fileEncoding="UTF-8-BOM", header = FALSE) %>%
toString(rhmp)
rhmp = toString(rhmp)
DB = test %>%
dplyr::filter(StationID %in% rhmp)
View(DB)
rhmp = toString(rhmp)
rhmp = as.character(rhmp)
rhmp = read.csv("RHMP_data.csv", fileEncoding="UTF-8-BOM", header = FALSE)
rhmp = as.character(rhmp)
rhmp = read.csv("RHMP_data.csv", fileEncoding="UTF-8-BOM", header = FALSE)
View(rhmp)
rhmp = as.character(rhmp$V1)
DB = test %>%
dplyr::filter(StationID %in% rhmp)
View(DB)
source('P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/R/MAMBI.R')
mambi.scores <- MAMBI(DB, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid")
