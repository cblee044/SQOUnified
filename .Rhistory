load("P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/data/benthic_data.Rdata")
out <- BenthicData %>%
dplyr::left_join(Taxonomic_Info, by = c('taxon' = 'Taxon')) %>%
dplyr::right_join(assignment, by = 'stationid') %>%
# I assume that the next line is something they had in there as a method of removing duplicates
# for this reason, this next line will likely be eliminated.
# They grouped by all the columns that were selected (In query BRI - 1)
# Instead, if need be we can use something from dplyr that deals with duplicates
# I actually found that it didn't appear to make a difference
#dplyr::group_by(stratum, stationid, replicate, taxon, abundance, `B-CodeScore`) %>%
dplyr::filter(stratum %in% c("Estuaries", "Marinas", "Bays", "Ports")) %>%
dplyr::filter(!is.na(`B-CodeScore`)) %>%
dplyr::select(stratum, stationid, replicate, taxon, abundance, `B-CodeScore`)  %>%
# End of BRI - 1 query. Begin BRI - 2 query
dplyr::mutate(
fourthroot_abun = abundance ** 0.25,
tolerance_score = fourthroot_abun * `B-CodeScore`
) %>%
# End of BRI - 2. Begin BRI - 3
dplyr::group_by(
stratum, stationid, replicate
) %>%
dplyr::summarize(
BRI_Score = sum(tolerance_score, na.rm = T) / sum(fourthroot_abun, na.rm = T)
)
source('P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/R/BRI.R', echo=TRUE)
BRI(benthic_data)
require(tidyverse)
require(reshape2)
require(vegan)
out <- BenthicData %>%
dplyr::left_join(Taxonomic_Info, by = c('taxon' = 'Taxon')) %>%
dplyr::right_join(assignment, by = 'stationid') %>%
# I assume that the next line is something they had in there as a method of removing duplicates
# for this reason, this next line will likely be eliminated.
# They grouped by all the columns that were selected (In query BRI - 1)
# Instead, if need be we can use something from dplyr that deals with duplicates
# I actually found that it didn't appear to make a difference
#dplyr::group_by(stratum, stationid, replicate, taxon, abundance, `B-CodeScore`) %>%
dplyr::filter(stratum %in% c("Estuaries", "Marinas", "Bays", "Ports")) %>%
dplyr::filter(!is.na(`B-CodeScore`)) %>%
dplyr::select(stratum, stationid, replicate, taxon, abundance, `B-CodeScore`)  %>%
# End of BRI - 1 query. Begin BRI - 2 query
dplyr::mutate(
fourthroot_abun = abundance ** 0.25,
tolerance_score = fourthroot_abun * `B-CodeScore`
) %>%
# End of BRI - 2. Begin BRI - 3
dplyr::group_by(
stratum, stationid, replicate
) %>%
dplyr::summarize(
BRI_Score = sum(tolerance_score, na.rm = T) / sum(fourthroot_abun, na.rm = T)
)
BRI(benthic_data)
#'
#'
#' @usage data(benthic_data)
#' @usage data(EG_Ref)
#' @usage data(Taxonomic_Info)
#' @usage data(assignment)
#'
#' @examples
#'
#'
"assignment"
"benthic_data"
"EG_Ref"
"Taxonomic_Info"
load("P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/data/assignment.RData")
load("P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/data/EG_Ref.Rdata")
load("P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/data/Taxonomic_Info.Rdata")
out <- BenthicData %>%
dplyr::left_join(Taxonomic_Info, by = c('taxon' = 'Taxon')) %>%
dplyr::right_join(assignment, by = 'stationid') %>%
# I assume that the next line is something they had in there as a method of removing duplicates
# for this reason, this next line will likely be eliminated.
# They grouped by all the columns that were selected (In query BRI - 1)
# Instead, if need be we can use something from dplyr that deals with duplicates
# I actually found that it didn't appear to make a difference
#dplyr::group_by(stratum, stationid, replicate, taxon, abundance, `B-CodeScore`) %>%
dplyr::filter(stratum %in% c("Estuaries", "Marinas", "Bays", "Ports")) %>%
dplyr::filter(!is.na(`B-CodeScore`)) %>%
dplyr::select(stratum, stationid, replicate, taxon, abundance, `B-CodeScore`)  %>%
# End of BRI - 1 query. Begin BRI - 2 query
dplyr::mutate(
fourthroot_abun = abundance ** 0.25,
tolerance_score = fourthroot_abun * `B-CodeScore`
) %>%
# End of BRI - 2. Begin BRI - 3
dplyr::group_by(
stratum, stationid, replicate
) %>%
dplyr::summarize(
BRI_Score = sum(tolerance_score, na.rm = T) / sum(fourthroot_abun, na.rm = T)
)
BRI(benthic_data)
View(benthic_data)
View(Taxonomic_Info)
load("P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/data/benthic_data.Rdata")
View(benthic_data)
View(benthic_data)
# con is short for connection
# Create connection to the database
con <- DBI::dbConnect(
PostgreSQL(),
host = "192.168.1.16",
dbname = 'bight2018',
user = 'b18read',
password = '1969$Harbor' # if we post to github, we might want to do rstudioapi::askForPassword()
)
infauna <- tbl(con, "tbl_infaunalabundance_initial") %>%
as_tibble %>%
dplyr::filter(exclude == 'No')
require(DBI) # needed to connect to database
require(dbplyr) # needed to connect to database
require(RPostgreSQL) # needed to connect to our database
require(rstudioapi) # just so we can type the password as we run the script, so it is not written in the clear
require(tidyverse)
require(sqldf)
"benthic_data"
"Taxonomic_Info"
# con is short for connection
# Create connection to the database
con <- DBI::dbConnect(
PostgreSQL(),
host = "192.168.1.16",
dbname = 'bight2018',
user = 'b18read',
password = '1969$Harbor' # if we post to github, we might want to do rstudioapi::askForPassword()
)
infauna <- tbl(con, "tbl_infaunalabundance_initial") %>%
as_tibble %>%
dplyr::filter(exclude == 'No')
grab <- tbl(con, "tbl_grabevent") %>%
as_tibble %>%
dplyr::filter(grabeventnumber == 1)
assignment <- tbl(con, "field_assignment_table") %>%
as_tibble %>%
dplyr::filter(stratum == "Bays" | stratum == "Ports" | stratum == "Estuaries" | stratum == "Brackish Estuaries")
station_occupation <- tbl(con, "tbl_stationoccupation") %>%
as_tibble %>%
inner_join(assignment, by = 'stationid')
# TODO --> Be sure to go back and update the benthic_query.R file so that we get the data included below. We need this
# to run the RBI function. Other changes will also need to be included if other info is needed for IBI, BRI, and RIVPACS
rbi_data <- grab %>%
dplyr::filter(benthicinfauna == 'Yes') %>%
dplyr::inner_join(station_occupation, by = c('stationid','sampledate' = 'occupationdate')) %>%
dplyr::inner_join(infauna, by = c('stationid','sampledate')) %>%
dplyr::select('stationid','replicate','sampledate','latitude','longitude','taxon','abundance','salinity', 'stratum', 'exclude') %>%
dplyr::inner_join(Taxonomic_Info, by = c('taxon' = 'Taxon')) %>%
dplyr::mutate_if(is.numeric, list(~na_if(., -88))) %>%
dplyr::add_count(taxon) %>%
dplyr::select('stationid','replicate','taxon','abundance','stratum', 'Phylum', 'Subphylum', 'n') %>%
dplyr::group_by(stratum, stationid, replicate, taxon, abundance, Phylum, Subphylum) %>%
dplyr::rename(NumOfTaxa = n) %>%
dplyr::rename(species = taxon) %>%
dplyr::rename(StationID = stationid, Replicate = replicate, Species = species, Abundance = abundance, B13_Stratum = stratum)
View(rbi_data)
?filter
MAMBI(benthic_data, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid")
source('P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/R/MAMBI.R', echo=TRUE)
MAMBI(benthic_data, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid")
load("P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/data/Saline_Standards.Rdata")
load("P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/data/TidalFresh_Standards.Rdata")
MAMBI(benthic_data, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid")
source('P:/PartTimers/JoanaPerdomo/Projects/SQOUnified/R/EQR.R', echo=TRUE)
MAMBI(benthic_data, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid")
mambi.score = MAMBI(benthic_data, EG_File_Name="data/Ref - EG Values 2018.csv", EG_Scheme="Hybrid")
View(mambi.score)
